{
  
    
        "post0": {
            "title": "Time Series Data Part 1: What is a Time Series?",
            "content": "Time Series Data Part 1: What is a Time Series? . Time Series Data Overview . We live in an age of data that we don’t know how to sort through. It comes in many forms; there are pictures and purchases and google searches and blog posts floating around hard drives all over the world. . The focus of this will be on “Time Series” data; any data that is ordered by the passage of fixed periods of time. In other words: “Data you keep track of every X number of minutes (or weeks, or months!)” . Some real-world Time Series data examples: . Weather history The average temperature of each day | . | Energy Usage The average amount of electricity used by a city each day | . | Stock price history Opening / Closing price of each day | . | Purchase history Average number of purchases in each month | . | Field sensor signals Average seismic readings in an area per hour | . | . Mathematically speaking, we have example “observations” at each “period” of time. This can be represented like a list of values going back in time: . y_t, y_t-1, y_t-2, … y_0 . But before getting too deep into Time Series, what isn’t a Time Series? . What isn’t a Time Series? . When developers think of “data”, many will rightfully jump to “databases.” Often used are relational SQL such as Postgres and MySQL. There are also many flavors of unstructured and columnar Non/NO-SQL databases. . Relational Data . Relational data fits many normal business use cases, like keeping track of your employee / user / student data. Here’s some relational data with 3 columns that holds some information about our users: . id name favorite_food . 1 | Alice | Spam | . 2 | Bob | Eggs | . Non-Relational Data . Unstructured data fits many user-created use cases, like representing a blog post or user’s settings. . VS Code handles non-default user preferences by adding to a JSON document. Here are some of mine: . { &quot;python.testing.pytestEnabled&quot;: true, &quot;python.sortImports.path&quot;: &quot;isort&quot;, &quot;python.sortImports.args&quot;: [ &quot;--profile black&quot; ], &quot;window.zoomLevel&quot;: 1, } . What’s The Use of Time Series . Time Series Forecasting . One of the powers of Time Series data is the ability to predict the future! It’s not possible in all cases of course, but that is the goal of Time Series “forecasting.” . By analyzing the history and patterns of the data, a prediction can be made for one or more periods in the future. . This is incredibly powerful and used every day in real business scenarios. For example: using a businesses’ historical sales to predict if they’ll make enough to payback a bigger loan. . Mathematically this is represented as the result of a function on the present and previous observations. “Y Hat” is the predicted value of the next period. . y_hat_t+1 = g(t, y_t, y_t-1, y_t-2, … y_0) . In python we might write a function like the following: . prediction = get_prediction(period, observations) . Many Time Series forecasts can be massively improved by data that is external to the raw observations. These external data are also passed to the prediction function and are often called “Covariates”. . Quoting from the Python [Darts] library: . past covariates are (by definition) covariates known only into the past (e.g. measurements) | . future covariates are (by definition) covariates known into the future (e.g., weather forecasts) | . static covariates are (by definition) covariates constant over time. They are not yet supported in Darts, but we are working on it! | . Unique Features of Time Series . Trend: Long term general direction | Affects how we think about the data over longer periods | . | Cyclicality Long horizon patterns of high-low-high movement | Longer than years, which can usually fit in seasonality | . | Seasonality Shorter periods of rising and falling movement | Usually in sync with times of year | . | Irregularity Random changes that don’t fit the trend and cycle | . | . Unforecastable Data . These concepts just don’t exist in Relational and Unstructured data. You couldn’t predict anything about the future of our users’ favorite foods just by looking at the table above. . (Note: If we also kept track of when each person’s preference changed, then we would be able to create some Time Series data from that!) .",
            "url": "https://tech.gerardbentley.com/python/time%20series/beginner/2022/03/10/timeseries-part-1.html",
            "relUrl": "/python/time%20series/beginner/2022/03/10/timeseries-part-1.html",
            "date": " • Mar 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "macOS Developer Setup",
            "content": "macOS Developer Setup . NOTE: at some point you will be prompted to install the “Command Line Developer Tools” for Xcode. This is a large download. Be prepared. . Python . Mac still ships with python 2, but one day maybe it won’t… . I prefer using conda to manage python anyway, so my install notes works just fine for me. . # Note, this uses macOS Apple M1 installer. Use apple menu -&gt; About This Mac to check if “Chip” is Apple M1 # Download curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh -o conda_installer.sh # Install with human prompts, agree to license and conda init bash conda_installer.sh # Cleanup your computer rm conda_installer.sh # (if needed for script) Silent Install bash conda_installer.sh -b source miniconda3/bin/activate &amp;&amp; conda init zsh . In a new Terminal, update python version to desired 3.9 or 3.10 or what have you . conda install python=3.10 . Add packages you might want for development and testing. (This is where I had to install Xcode developer tools in order to build python packages) . pip install black flake8 isort pep8-naming pytest-cov . Optionally install tools from the Project Jupyter ecosystem: . # Just jupyter notebook server pip install notebook # Jupyterlab capability pip install jupyterlab . VS Code . Download the Mac installer (it should choose the correct version for your system) | Unzip it from your browser downloads or Finder -&gt; Downloads | Move the “Visual Studio Code” Application to Applications if desired | Delete the Installer zip if desired | . NOTE: I couldn’t find the correct link to download with curl . Extensions . Dracula (theme) | Python Specific Python (Microsoft official) | Python Docstring Generator (Nils Werner) | Even Better TOML (tamasfe) | . | General VS Code indent-rainbow (oderwat): Visualize deeply indented blocks more easily | GitLens (Eric Amodio): Quickly check git history of files, branches, lines, etc. | . | Various File Types Markdown All in One (Yu Zhang) | Markdown navigation (AlanWalk) | markdownlint (David Anson) | Paste Image (mushan) | Markdown Preview Github Styling (Matt Bierner) | Markdown Emoji (Matt Bierner) | Docker (Microsoft) | YAML (Red Hat) | XML (Red Hat) | SQL Formatter (adpyke) | . | . Settings . I tend to put these in the VS Code settings (cmd + shift + p then type “settings JSON” for one way to get there). . A lot of these are Python experience and specific to using flake8, black, and isort. These are the first several up to and including the “autoDocstring” entry. . That said, there’s some that are useful for general editing, searching large code bases, and working with the integrated terminal. Shoutout to Harald Kirschner’s tips (and presentation). . { &quot;python.condaPath&quot;: &quot;~/miniconda3/bin/conda&quot;, &quot;python.defaultInterpreterPath&quot;: &quot;~/miniconda3/bin/python&quot;, &quot;python.formatting.provider&quot;: &quot;black&quot;, &quot;python.linting.flake8Enabled&quot;: true, &quot;python.linting.enabled&quot;: true, &quot;python.testing.pytestEnabled&quot;: true, &quot;python.sortImports.path&quot;: &quot;isort&quot;, &quot;python.sortImports.args&quot;: [ &quot;--profile black&quot; ], &quot;python.terminal.executeInFileDir&quot;: true, &quot;jupyter.askForKernelRestart&quot;: false, &quot;terminal.integrated.inheritEnv&quot;: false, &quot;autoDocstring.startOnNewLine&quot;: true, &quot;workbench.colorTheme&quot;: &quot;Dracula Soft&quot;, &quot;telemetry.telemetryLevel&quot;: &quot;off&quot;, &quot;security.workspace.trust.untrustedFiles&quot;: &quot;open&quot;, &quot;files.autoSave&quot;: &quot;onFocusChange&quot;, &quot;terminal.integrated.allowChords&quot;: false, &quot;search.mode&quot;: &quot;reuseEditor&quot;, &quot;search.searchEditor.doubleClickBehaviour&quot;: &quot;openLocationToSide&quot;, &quot;files.defaultLanguage&quot;: &quot;${activeEditorLanguage}&quot;, &quot;workbench.editor.pinnedTabSizing&quot;: &quot;shrink&quot;, &quot;editor.minimap.enabled&quot;: false, &quot;diffEditor.ignoreTrimWhitespace&quot;: false, } . Keybindings . Some things are worth changing for productivity and matching other tools. . Jump to beginning of text in the line: ctrl + a | Jump to top / bottom of file: shift + cmd + , and shift + cmd + / From Emacs muscle memory trying to get something similar | . | . [ { &quot;key&quot;: &quot;ctrl+a&quot;, &quot;command&quot;: &quot;cursorHome&quot; }, { &quot;key&quot;: &quot;shift+cmd+,&quot;, &quot;command&quot;: &quot;cursorTop&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;key&quot;: &quot;shift+cmd+/&quot;, &quot;command&quot;: &quot;cursorBottom&quot;, &quot;when&quot;: &quot;textInputFocus&quot; }, { &quot;key&quot;: &quot;shift+cmd+,&quot;, &quot;command&quot;: &quot;-editor.action.inPlaceReplace.up&quot;, &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot; } ] . Docker . For running applications and mocking linux filesystems. . Docker recommends installing Rosetta 2 when running on Apple Silicon. This will install it to translate from Intel to M1: . softwareupdate --install-rosetta . Download the .dmg | Open and .dmg then drag the Docker Application into Applications | Search or open Docker from spotlight | Accept terms and conditions | Try to run the hello world application | . docker run -rm hello-world . Github . I use SSH keys to connect to github / gitlab / etc. for convenience and making the connection work out of the box from tools like VS Code. . Set Default Git User . Set your preferences so tools like VS Code will use these on your commits by default. . git config --global user.name &quot;Your Name Here&quot; git config --global user.email &quot;your_email@your_domain.com&quot; . Create SSH Key . It’s best to create new keys for new machines as opposed to copying an old key from one machine to another. Use a password if other people have access to your machine, otherwise feel free to leave blank. . ssh-keygen -t ed25519 -f ~/.ssh/github_key . Add Github to SSH Config . To make sure this key gets used when we try to authenticate to Github, we’ll add the following entry to ~/.ssh/config: . Host github.com PreferredAuthentications publickey IdentityFile ~/.ssh/github_key . To do this with a terminal editor use one of the following: . nano ~/.ssh/config vim ~/.ssh/config ed ~/.ssh/config . To do this with a GUI editor, you have to make sure the file exists first: . touch ~/.ssh/config open ~/.ssh/config . Add Public Key to Github . Copy your public key to the clipboard with the following: . pbcopy &lt; ~/.ssh/github_key.pub . Alternatively you can paste it out and copy by hand: . cat ~/.ssh/github_key.pub . NOTE: be sure you are copying your .pub Public key, and not the Private key . Navigate to your github Account -&gt; Settings -&gt; SSH and GPG keys (under “Access”, or this link) | Select New SSH Key | . . Enter a nickname for your machine | Paste the Public key into the main text area | . . Test Authentication . This command should spit out a message like Hi {username}! You&#39;ve successfully authenticated if successful. . ssh -T git@github.com . Homebrew . See main site: “Installs the stuff you need that Apple didn’t” . # Grab and install homebrew from latest GitHub release /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot; # Add to PATH echo &#39;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#39; &gt;&gt; /Users/gar/.zprofile eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot; . Amethyst . Window Tiling Manager for macOS 10.12+ by ianyh. For splitting windows left and right, full screen, quarters, etc. . brew install --cask amethyst . Open application and grant Accessibility Privacy permissions in Security &amp; Privacy System Preferences .",
            "url": "https://tech.gerardbentley.com/os/habits/2022/02/18/macos_setup.html",
            "relUrl": "/os/habits/2022/02/18/macos_setup.html",
            "date": " • Feb 18, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "My Favorite Python One Liner Sucks",
            "content": "Writing to a file in one line . tl;dr it&#39;s now: . # Setup some_data = [&#39;alice&#39;, &#39;bob&#39;, &#39;chuck&#39;] # Some sample data from pathlib import Path # Write data to file called my_file.txt . . Path(&#39;my_file.txt&#39;).write_text(&#39; n&#39;.join(some_data)) . 15 . Favorite One-Liner . Python is full of one-liners. . One of my favorites has been: . open(&#39;my_file.txt&#39;, &#39;w&#39;).write(&#39; n&#39;.join(some_data)) . 15 . It opens a file in write mode and writes some data or other text to that file, returning the amount of bytes written to the file. Generally useful for saving a list of column names or people names or what have you. No external libraries, and even no extra imports because open() is a built-in function . But it leaves the file handle open... . Which may not be a problem in some usecases, but it can prevent other users or processes from moving or deleting the file. Google&#39;s Python style guide provides some more reasons, including wasting resources and preventing logical errors in code. . With Statement . Of course the with ... as ...: syntax from PEP 343 is great for this safe handling of a file object that has to be opened and closed. . It can be done in one line, but most prefer to break it up into 2. This is more awkward to use in a REPL doing ad-hoc work or notebook trying to conserve cell space . with open(&#39;my_file.txt&#39;, &#39;w&#39;) as f: f.write(&#39; n&#39;.join(some_data)) . with open(&#39;my_file.txt&#39;, &#39;w&#39;) as f: f.write(&#39; n&#39;.join(some_data)) . Comparing With and Without (With) . Checking out the bytecode on a simplified write, we can confirm that my favorite one-liner doesn&#39;t close the file, whereas the with one-liner does. . (If you&#39;re not familiar with dis, it&#39;s the Python module for disassembling Python code into its C bytecode. Not always necessary, but will prove 100% whether 2 code snippets operate the same under the covers) . from dis import dis dis(&quot;open(&#39;my_file.txt&#39;, &#39;w&#39;).write(&#39;something&#39;)&quot;) . 1 0 LOAD_NAME 0 (open) 2 LOAD_CONST 0 (&#39;my_file.txt&#39;) 4 LOAD_CONST 1 (&#39;w&#39;) 6 CALL_FUNCTION 2 8 LOAD_METHOD 1 (write) 10 LOAD_CONST 2 (&#39;something&#39;) 12 CALL_METHOD 1 14 RETURN_VALUE . Definitely no calls to close(). What about in the with statement? . dis(&quot;with open(&#39;my_file.txt&#39;, &#39;w&#39;) as f: f.write(&#39;something&#39;)&quot;) . 1 0 LOAD_NAME 0 (open) 2 LOAD_CONST 0 (&#39;my_file.txt&#39;) 4 LOAD_CONST 1 (&#39;w&#39;) 6 CALL_FUNCTION 2 8 SETUP_WITH 26 (to 36) 10 STORE_NAME 1 (f) 12 LOAD_NAME 1 (f) 14 LOAD_METHOD 2 (write) 16 LOAD_CONST 2 (&#39;something&#39;) 18 CALL_METHOD 1 20 POP_TOP 22 POP_BLOCK 24 LOAD_CONST 3 (None) 26 DUP_TOP 28 DUP_TOP 30 CALL_FUNCTION 3 32 POP_TOP 34 JUMP_FORWARD 16 (to 52) &gt;&gt; 36 WITH_EXCEPT_START 38 POP_JUMP_IF_TRUE 42 40 RERAISE &gt;&gt; 42 POP_TOP 44 POP_TOP 46 POP_TOP 48 POP_EXCEPT 50 POP_TOP &gt;&gt; 52 LOAD_CONST 3 (None) 54 RETURN_VALUE . The context manager takes a lot more steps to manage the call stack. But there&#39;s no clear call to the close() function, which is the other standard way of writing to a file and closing the handle. . dis(&quot;f = open(&#39;my_file.txt&#39;, &#39;w&#39;) nf.write(&#39;something&#39;) nf.close()&quot;) . 1 0 LOAD_NAME 0 (open) 2 LOAD_CONST 0 (&#39;my_file.txt&#39;) 4 LOAD_CONST 1 (&#39;w&#39;) 6 CALL_FUNCTION 2 8 STORE_NAME 1 (f) 2 10 LOAD_NAME 1 (f) 12 LOAD_METHOD 2 (write) 14 LOAD_CONST 2 (&#39;something&#39;) 16 CALL_METHOD 1 18 POP_TOP 3 20 LOAD_NAME 1 (f) 22 LOAD_METHOD 3 (close) 24 CALL_METHOD 0 26 POP_TOP 28 LOAD_CONST 3 (None) 30 RETURN_VALUE . The open() function code lives here. . It&#39;s a wrapper around a FileIO object, whose close method will use os.close(), the low-level file closing method. . The FileIO inherits a context manager from IOBase that calls close when exited, so we can be sure it&#39;ll get called. . Pathlib usage . Making the extra import is worth it for Path object to get the following: . Accurate path on any OS | file open and close with write_text() | Still a similar one-liner! | . from pathlib import Path Path(&#39;my_file.txt&#39;).write_text(&#39; n&#39;.join(some_data)) . 15 . Does the disassembler tell us anything? . dis(&quot;Path(&#39;my_file.txt&#39;).write_text(&#39;something&#39;)&quot;) . 1 0 LOAD_NAME 0 (Path) 2 LOAD_CONST 0 (&#39;my_file.txt&#39;) 4 CALL_FUNCTION 1 6 LOAD_METHOD 1 (write_text) 8 LOAD_CONST 1 (&#39;something&#39;) 10 CALL_METHOD 1 12 RETURN_VALUE . Not really, what about on the write_text method specifically? . dis(Path(&#39;my_file.txt&#39;).write_text) . 1282 0 LOAD_GLOBAL 0 (isinstance) 2 LOAD_FAST 1 (data) 4 LOAD_GLOBAL 1 (str) 6 CALL_FUNCTION 2 8 POP_JUMP_IF_TRUE 26 1283 10 LOAD_GLOBAL 2 (TypeError) 12 LOAD_CONST 1 (&#39;data must be str, not %s&#39;) 1284 14 LOAD_FAST 1 (data) 16 LOAD_ATTR 3 (__class__) 18 LOAD_ATTR 4 (__name__) 1283 20 BINARY_MODULO 22 CALL_FUNCTION 1 24 RAISE_VARARGS 1 1285 &gt;&gt; 26 LOAD_FAST 0 (self) 28 LOAD_ATTR 5 (open) 30 LOAD_CONST 2 (&#39;w&#39;) 32 LOAD_FAST 2 (encoding) 34 LOAD_FAST 3 (errors) 36 LOAD_CONST 3 ((&#39;mode&#39;, &#39;encoding&#39;, &#39;errors&#39;)) 38 CALL_FUNCTION_KW 3 40 SETUP_WITH 26 (to 68) 42 STORE_FAST 4 (f) 1286 44 LOAD_FAST 4 (f) 46 LOAD_METHOD 6 (write) 48 LOAD_FAST 1 (data) 50 CALL_METHOD 1 52 POP_BLOCK 54 ROT_TWO 56 LOAD_CONST 4 (None) 58 DUP_TOP 60 DUP_TOP 62 CALL_FUNCTION 3 64 POP_TOP 66 RETURN_VALUE &gt;&gt; 68 WITH_EXCEPT_START 70 POP_JUMP_IF_TRUE 74 72 RERAISE &gt;&gt; 74 POP_TOP 76 POP_TOP 78 POP_TOP 80 POP_EXCEPT 82 POP_TOP 84 LOAD_CONST 4 (None) 86 RETURN_VALUE . Well that&#39;s a whole lot to end up looking like the same bytecode as the with statement... . In fact, pathlib would have gotten away with it too if it weren&#39;t for that meddling source code to betray it! . We wind up calling the same with statement, but get a free assertion that our data is a valid string: . # pathlib.Path.write_text # ... with self.open(mode=&#39;w&#39;, encoding=encoding, errors=errors, newline=newline) as f: return f.write(data) . Conclusion . Pathlib write_text() is just with open()... under the covers. . Nevertheless, I prefer the write_text() one-liner to the with open() as f: ... one-liner out of respect for colons. .",
            "url": "https://tech.gerardbentley.com/beginner/python/2022/02/15/my-favorite-python-one-liner-sucks.html",
            "relUrl": "/beginner/python/2022/02/15/my-favorite-python-one-liner-sucks.html",
            "date": " • Feb 15, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Python Form Generator (JSON to Streamlit Form!)",
            "content": "Python Form Generator . . From raw JSON to Python Pydantic Model to Streamlit Input Form :zap: . Bootstrapping more Streamlit apps from within a Streamlit app :recycle: . Generate well-typed and validated Python forms from basic JSON example. . DEPENDENCIES: . Datamodel Code Generator for mapping to Pydantic model | JSON to Pydantic for proof this can work | Streamlit Pydantic for bootstrapped app code | . . Full Walkthrough . Skeleton . GOAL: Initialize git repo with necessary file scaffold: . app.py: The main streamlit entry app | requirements.txt: Pin versions of Python packages so deployment and development is repeatable | README.md: This documentation | .gitignore: Prevent secrets or large files or unecessary things from going into github Recommended github python gitignore template works fine for this, slightly overkill | . | LICENSE: Apache 2.0 same as Streamlit Terms | . mkdir python-form-generator cd python-form-generator/ touch README.md LICENSE .gitignore app.py requirements.txt git init git checkout -b main git remote add origin git@github.com:gerardrbentley/python-form-generator.git git add . git commit -m &quot;skeleton&quot; . Install . We’ll plan on 4 main packages for this: . streamlit | pydantic | streamlit-pydantic | datamodel-code-generator | . python -m venv venv . ./venv/bin/activate pip install streamlit-pydantic datamodel-code-generator pip list | grep &quot;streamlit |pydantic |datamodel-code&quot; . Note: This lets streamlit-pydantic to choose which versions of streamlit and pydantic work for the latest release. . Saving the output to requirements.txt in the format: . datamodel-code-generator==0.11.19 pydantic==1.9.0 streamlit==1.5.1 streamlit-pydantic==0.5.0 . Saving the output to requirements.txt allows new users / deploys to install pinned verions with something like the following: . pip install -r requirements.txt . git add requirements.txt README.md git commit -m &quot;install&quot; . Hello World . Adding the following to app.py: . import streamlit as st def main() -&gt; None: st.header(&quot;Python Form Generator&quot;) st.subheader(&quot;Enter your JSON and get a free Pydantic model + Streamlit Input Form using it!&quot;) json_input = st.text_area(&#39;JSON example&#39;, height=200) st.write(json_input) if __name__ == &quot;__main__&quot;: main() . Then run with streamlit to check if basic input / processing frontend works. . streamlit run app.py # ctrl + c to stop . git add app.py README.md git commit -m &quot;input hello world&quot; . Model Generation . We’ll draw from 3 sources for the meat and potatoes of this app: . Streamlit Pydantic Usage Guide | Datamodel Code Generator conversion | JSON to Pydantic conversion | . Imports . Expand import section of app.py to accomodate Streamlit Pydantic, Datamodel code generator, and GenSON . (Datamodel code generator is intended as CLI tool, so we have to dig a bit into it) . import json from pydantic import Json, BaseModel from datamodel_code_generator.parser.jsonschema import JsonSchemaParser from genson import SchemaBuilder import streamlit as st import streamlit_pydantic as sp . Upgraded Input . We’ll use Streamlit Pydantic to get out of the box validation of the JSON that the user provides. Plus we get extensibility via the FormModel if we want to add more configuration options! . Instead of a plain text_input from streamlit, we utilize sp.pydantic_form and provide our model (which only has 1 input field for now!) . After getting some input JSON from the User it will pass off to converting to a model. . class FormGeneratorModel(BaseModel): model_schema: Json def main() -&gt; None: st.header(&quot;Python Form Generator&quot;) st.subheader( &quot;Enter your JSON and get a free Pydantic model + Streamlit Input Form using it!&quot; ) data = sp.pydantic_form(key=&quot;json_input&quot;, model=FormGeneratorModel) if data: show_generated_code(data.model_schema) . Conversion . Following in the footsteps of JSON to Pydantic and Datamodel Code Generator, we use GenSON to build a JSONSchema representation from raw JSON data, then dump that into the Datamodel Code Generator parser. . We’ll handle the same error case Datamodel code generator does, otherwise assume the happy path and display the results! . def show_generated_code(schema: Json) -&gt; None: model_code = json_to_pydantic(schema) if not model_code: st.error(&quot;Models not found in the input data&quot;) else: st.code(model_code) def json_to_pydantic(input_text: str) -&gt; str: builder = SchemaBuilder() builder.add_object(input_text) schema = builder.to_schema() parser = JsonSchemaParser( source=json.dumps(schema), base_class=&quot;pydantic.BaseModel&quot;, ) return parser.parse() . LGTM . Trying out a simple entry (even simpler than the littlest fullstack app) such as the following: . {&quot;body&quot;: &quot;:tada:&quot;, &quot;username&quot;: &quot;:cat:&quot;} . Produces expected result . from __future__ import annotations from pydantic import BaseModel class Model(BaseModel): body: str username: str . Time to ship it and generate a Form! . git add app.py README.md git commit -m &quot;model generation&quot; . Bootstrapping . Alright, we’ve got a nice Pydantic model, time to generate a Streamlit Pydantic scaffold from it and provide a download link. . Update Show Model . We’ll allow the user to download just the model into a .py file and hide the generated model unless they want to see it. . def show_generated_code(schema: Json) -&gt; None: model_code = json_to_pydantic(schema) if not model_code: st.error(&quot;Models not found in the input data&quot;) else: with st.expander(&quot;Original Converted Model&quot;): st.code(model_code, language=&quot;python&quot;) st.download_button(&quot;Download Generated Model Only&quot;, data=model_code, file_name=&quot;model.py&quot;, mime=&quot;text/plain&quot;) show_generated_form(model_code) . Inject Generated Code . We only need 2 features to really bootstrap these forms: . Added imports | Retrieve form data in Streamlit app | . I’ll add a main() method to keep scope contained, but the Streamlit execution model embraces all Python scripting . MAIN_TEMPLATE = &quot;&quot;&quot; def main() -&gt; None: st.header(&quot;Model Form Submission&quot;) data = sp.pydantic_form(key=&quot;my_model&quot;, model=Model) if data: st.json(data.json()) if __name__ == &quot;__main__&quot;: main() &quot;&quot;&quot; def show_generated_form(model_code: str) -&gt; None: code_lines = model_code.split(&#39; n&#39;) code_lines.insert(2, &quot;import streamlit_pydantic as sp&quot;) code_lines.insert(2, &quot;import streamlit as st&quot;) code_lines.insert(-1, MAIN_TEMPLATE) full_code = &#39; n&#39;.join(code_lines) st.subheader(&quot;Generated Streamlit Pydantic App&quot;) st.caption(&quot;Download it and run with `streamlit run model_form.py`&quot;) st.download_button(&quot;Download Generated Form!&quot;, data=full_code, file_name=&quot;model_form.py&quot;, mime=&quot;text/plain&quot;) st.code(full_code, language=&quot;python&quot;) . LGTM . Testing out the download and run on our simple model yields great results! . git add app.py README.md git commit -m &quot;app generation&quot; . Wrap Up . That’s it for the basic idea! . Next steps would be allowing configuration options such as “all Optional” and snake casing akin to JSON to Pydantic. Also more input forms, as Datamodel code generator handles OpenAPI, CSV data, and more. . git add README.md git commit -m &quot;lgtm!&quot; git push origin main .",
            "url": "https://tech.gerardbentley.com/intermediate/streamlit/python/2022/02/13/python-form-generator.html",
            "relUrl": "/intermediate/streamlit/python/2022/02/13/python-form-generator.html",
            "date": " • Feb 13, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Streamlit Full Stack Part 1: Python Web App in One File",
            "content": "Streamlit Fullstack Part 1: The Littlest Full Stack App . . A Frontend, Backend, and Data Store in one Python file! . Create, Read, Update, and Delete from a feed of 140 character markdown notes! . ex: . The Littlest Full Stack App . The idea for this was starting with built-in sqlite module and streamlit to build a full stack application in a single Python file: . Streamlit Frontend | . | Python w/ SQLite3 Backend | . | SQLite Data Store | . | . Obviously this takes some liberties with the definition of “Full Stack App”, for my purposes I take it to mean “a web application with a frontend that receives data from some a backend and that data is persisted in some data store” . For the first swing at this I also went with classic CRUD Operations that drive requirements for so many Full-Stack applications: . Create | Read | Update | Delete | . Data Store . Using SQLite is straightforward if you understand how to set up and query other SQL flavors. (For a more in depth guide on SQL databases, I’d recommend the SQLModel docs and Intro to Databases for a more beginner friednly intro than reading SQLite documentation…) . I say it’s straightforward because we don’t need to download or run any external database server. SQLite is a C library that works within an application to store data to disk or memory without an external server. It will let us connect with a database using just two lines of python! . import sqlite3 connection = sqlite3.connect(&#39;:memory:&#39;) . This gets us a Connection object for interacting with an in-memory SQL database! . For the purposes of using it as a more persistant store, it can be configured to write to a local file (conventionally ending with .db). . It also defaults to only being accessible by a single thread, so we’ll need to turn this off for multiple users hitting the application in the same thread. . connection = sqlite3.connect(&#39;notes.db&#39;, check_same_thread=False) . Backend . This is all in one file, but the idea of a “Service” that provides reading and writing to the data store is useful to keep track of our goals. This can be captured in a class as a namespace, using staticmethods to indicate they don’t need an instance: . class NoteService: &quot;&quot;&quot;Namespace for Database Related Note Operations&quot;&quot;&quot; @staticmethod def list_all_notes( connection: sqlite3.Connection, ) -&gt; List[sqlite3.Row]: &quot;&quot;&quot;Returns rows from all notes. Ordered in reverse creation order&quot;&quot;&quot; read_notes_query = f&quot;&quot;&quot;SELECT rowid, created_timestamp, updated_timestamp, username, body FROM notes ORDER BY rowid DESC;&quot;&quot;&quot; note_rows = execute_query(connection, read_notes_query) return note_rows @staticmethod def create_note(connection: sqlite3.Connection, note: BaseNote) -&gt; None: &quot;&quot;&quot;Create a Note in the database&quot;&quot;&quot; create_note_query = f&quot;&quot;&quot;INSERT into notes(created_timestamp, updated_timestamp, username, body) VALUES(:created_timestamp, :updated_timestamp, :username, :body);&quot;&quot;&quot; execute_query(connection, create_note_query, asdict(note)) @staticmethod def update_note(connection: sqlite3.Connection, note: Note) -&gt; None: &quot;&quot;&quot;Replace a Note in the database&quot;&quot;&quot; update_note_query = f&quot;&quot;&quot;UPDATE notes SET updated_timestamp=:updated_timestamp, username=:username, body=:body WHERE rowid=:rowid;&quot;&quot;&quot; execute_query(connection, update_note_query, asdict(note)) @staticmethod def delete_note(connection: sqlite3.Connection, note: Note) -&gt; None: &quot;&quot;&quot;Delete a Note in the database&quot;&quot;&quot; delete_note_query = f&quot;&quot;&quot;DELETE from notes WHERE rowid = :rowid;&quot;&quot;&quot; execute_query(connection, delete_note_query, {&quot;rowid&quot;: note.rowid}) . NOTE: You could definitely initialize the class with a connection and not pass it to functions. Or in another module. Or both! . Frontend . Streamlit provides all the frontend components we need, supported underneath by React components such as those from Base Web / UI. . I chose to use a Selectbox in the Sidebar to act as page navigation. This organizes things similarly to other Streamlit multi page examples (Such as this awesome US Data Explorer from arup). . The main entrypoint looks like this: . def main() -&gt; None: &quot;&quot;&quot;Main Streamlit App Entry&quot;&quot;&quot; connection = get_connection(DATABASE_URI) init_db(connection) st.header(f&quot;The Littlest Fullstack App!&quot;) render_sidebar(connection) def render_sidebar(connection: sqlite3.Connection) -&gt; None: &quot;&quot;&quot;Provides Selectbox Drop Down for which view to render&quot;&quot;&quot; views = { &quot;Read Note Feed&quot;: render_read, # Read first for display default &quot;Create a Note&quot;: render_create, &quot;Update a Note&quot;: render_update, &quot;Delete a Note&quot;: render_delete, &quot;About&quot;: render_about, } choice = st.sidebar.selectbox(&quot;Menu&quot;, views.keys()) render_func = views.get(choice) render_func(connection) . Each of those render_xyz functions will use st. functions to display in the main body of the page when it is chosen in the SelectBox / drop down. . This is the render_read for example: . def render_note(note: Note) -&gt; None: &quot;&quot;&quot;Show a note with streamlit display functions&quot;&quot;&quot; st.subheader(f&quot;By {note.username} at {display_timestamp(note.created_timestamp)}&quot;) st.caption( f&quot;Note #{note.rowid} -- Updated at {display_timestamp(note.updated_timestamp)}&quot; ) st.write(note.body) def render_read(connection: sqlite3.Connection) -&gt; None: &quot;&quot;&quot;Show all of the notes in the database in a feed&quot;&quot;&quot; st.success(&quot;Reading Note Feed&quot;) note_rows = NoteService.list_all_notes(connection) with st.expander(&quot;Raw Note Table Data&quot;): st.table(note_rows) notes = [Note(**row) for row in note_rows] for note in notes: render_note(note) . For more on the forms for Creating, Updating and Deleting, check out the source code on github. . Gluing It All Together . SQLite can run with the Python process, so we’re good to deploy it wherever the Streamlit app runs | Frontend and Backend are in one server, so there’s no HTTP or Websocket communication going between App services | . Python dataclasses.dataclass provides a nice way of modeling simple entities like this Note example. It lacks all of the features of pydantic and attrs, but it does give us a free __init__ with typed kwargs and the dataclasses.asdict method. . After the rows are read from the database, the data is passed into this dataclass Note model. The model provides some level of validation on the data types and a Python object with known attributes for type-hinting and checking. . @dataclass class BaseNote: &quot;&quot;&quot;Note Entity for Creation / Handling without database ID&quot;&quot;&quot; created_timestamp: int updated_timestamp: int username: str body: str @dataclass class Note(BaseNote): &quot;&quot;&quot;Note Entity to model database entry&quot;&quot;&quot; rowid: int . Conclusion . That’s the basic app! . It’s not perfect, in fact there’s no error handling or testing or linting of any sort. . Also building things in one file is generally unsustainable, but I wanted to push the limits on this. One of the great python web frameworks, bottle, is a single (~4000 line) file! . But those sorts of things can be addressed after getting something working. In the next post we’ll replace SQLite with Postgres as the Data Store layer. When doing that, it’s my preference to start using Docker, specifically the Docker-Compose tool. It makes sure things are easy to setup, run, then destroy without worrying about installing things to my user / filesystem directly. .",
            "url": "https://tech.gerardbentley.com/streamlit/python/beginner/2022/02/10/streamlit-fullstack.html",
            "relUrl": "/streamlit/python/beginner/2022/02/10/streamlit-fullstack.html",
            "date": " • Feb 10, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Checking 48 Mountain Weather Locations at Once",
            "content": "Peak Weather: Checking New Hampshire&#39;s 48 4,000 Footers . Check it out live on streamlit cloud . Built to give you a dashboard view of the next few hours&#39; forecast for New Hampshires 48 4,000 ft mountains. Gonna rain on the Kinsmans? Is it snowing on Washington? Should I hike Owl&#39;s Head? . Powered by Streamlit + Open Weather API. Specifically, Streamlit runs the web interactinos and OpenWeather provides the data. . This post will go over a few aspects of the app: . Data scraping the mountain metadata | Connecting to Weather API feed | Making it reasonably fast | . Data Scraping . I couldn&#39;t find an easy csv or api for the latitudes and longitudes of the 48 4,000 footers, so I turned to Wikipedia for the list. . Try Pandas . The read_html() function in Pandas has been a sanity saver in my job for reading data from flat file specification documents. . Unfortunately the data I&#39;m looking for in Wikipedia is in &lt;li&gt;...&lt;/li&gt; tags, not a real html &lt;table&gt;...&lt;/table&gt; . Naive Copy+Paste . Next I tried just copying the list of names and heights to feed to a search API, yielding a csv like the following after some cleanup: . txt name,height_ft Washington,6288 Adams,5774 Jefferson,5712 . And this gives us csv access to the data like so: . import pandas as pd mountains = pd.read_csv(&#39;./data/mtns.txt&#39;) mountains.head(3) . name height_ft . 0 Washington | 6288 | . 1 Adams | 5774 | . 2 Jefferson | 5712 | . A-Links to the Rescue . Now with the list of peaks, I needed the corresponding latitude and longitudes. . After searching for a straightforward source, I realized the Wikipedia pages linked from the main list page were the best... . I grabbed the portion of the html with the list to a file with dev tools (chrome f12), but could have been done with BeautifulSoup . Scrape Mountain Links . from bs4 import BeautifulSoup # Chunk from 4,000 footers page containing list of mountains # https://en.wikipedia.org/wiki/Four-thousand_footers soup = BeautifulSoup(open(&quot;./data/wiki.html&quot;), &quot;html.parser&quot;) # Gather &lt;a&gt; tags, ignore citation links = [x for x in soup.find_all(&quot;a&quot;) if x.get(&quot;title&quot;)] links[:2] . [&lt;a class=&#34;mw-redirect&#34; href=&#34;/wiki/Mount_Washington_(New_Hampshire)&#34; title=&#34;Mount Washington (New Hampshire)&#34;&gt;Washington&lt;/a&gt;, &lt;a href=&#34;/wiki/Mount_Adams_(New_Hampshire)&#34; title=&#34;Mount Adams (New Hampshire)&#34;&gt;Adams&lt;/a&gt;] . Get Lat Lon For One Mountain . With access to the href attributes of the &lt;a&gt; tags, I could then fetch all of those pages and scrape out the Lat and Lon from each. . Most older guides will use Python&#39;s requests library for this kind of task, but that library does not have the ability to send asynchronous requests without multiprocessing (Translation: It&#39;s difficult to fetch a bunch of pages all at once). . I&#39;ve found success with httpx and aiohttp for making asynchronous requests in one Python process. So I went with httpx for fetching each page. . Lets demonstrate fetching one of those pages and scraping the Latitude and Longitude. We won&#39;t worry too much about errors or missed data for this cleaning phase. . import httpx # English Wikipedia BASE_URL = &quot;https://en.wikipedia.org&quot; def convert(raw_tude: str) -&gt; float: &quot;&quot;&quot;Takes a wikipedia latitude or longitude string and converts it to float Math Source: https://stackoverflow.com/questions/21298772/how-to-convert-latitude-longitude-to-decimal-in-python Args: raw_tude (str): Lat or Lon in one of the following forms: degrees°minutes′seconds″N, degrees°minutes′N, degrees-minutes-secondsN, degrees-minutesN Returns: (float): Float converted lat or lon based on supplied DMS &quot;&quot;&quot; tude = raw_tude.replace(&quot;°&quot;, &quot;-&quot;).replace(&quot;′&quot;, &quot;-&quot;).replace(&quot;″&quot;, &quot;&quot;) if tude[-2] == &quot;-&quot;: tude = tude[:-2] + tude[-1] multiplier = 1 if tude[-1] in [&quot;N&quot;, &quot;E&quot;] else -1 return multiplier * sum( float(x) / 60 ** n for n, x in enumerate(tude[:-1].split(&quot;-&quot;)) ) a_link = links[0] a_link . &lt;a class=&#34;mw-redirect&#34; href=&#34;/wiki/Mount_Washington_(New_Hampshire)&#34; title=&#34;Mount Washington (New Hampshire)&#34;&gt;Washington&lt;/a&gt; . name = a_link.get(&quot;title&quot;) link = a_link.get(&quot;href&quot;) # httpx lets us fetch the raw html page raw_page = httpx.get(BASE_URL + link) # Which bs4 will help parse raw_soup = BeautifulSoup(raw_page, &quot;html.parser&quot;) # find returns first instance of a tag with this class raw_lat = raw_soup.find(class_=&quot;latitude&quot;).text.strip() lat = convert(raw_lat) raw_lon = raw_soup.find(class_=&quot;longitude&quot;).text.strip() lon = convert(raw_lon) name, link, lat, lon . (&#39;Mount Washington (New Hampshire)&#39;, &#39;/wiki/Mount_Washington_(New_Hampshire)&#39;, 44.2705, -71.30324999999999) . Get Lat Lon For Many Mountains . Lets chuck the first 10 mountains into a for-loop and fetch the same pieces of data. . First we&#39;ll define a function to encapsulate the synchronous fetch logic . Then we&#39;ll see how long this takes with jupyter&#39;s %%time magic . def sync_get_coords(a_link: BeautifulSoup) -&gt; dict: name = a_link.get(&quot;title&quot;) link = a_link.get(&quot;href&quot;) raw_page = httpx.get(BASE_URL + link) raw_soup = BeautifulSoup(raw_page, &quot;html.parser&quot;) raw_lat = raw_soup.find(class_=&quot;latitude&quot;).text.strip() lat = convert(raw_lat) raw_lon = raw_soup.find(class_=&quot;longitude&quot;).text.strip() lon = convert(raw_lon) return {&quot;name&quot;: name, &quot;link&quot;: link, &quot;lat&quot;: lat, &quot;lon&quot;: lon} . %%time for a_link in links[:10]: result = sync_get_coords(a_link) print(result) . {&#39;name&#39;: &#39;Mount Washington (New Hampshire)&#39;, &#39;link&#39;: &#39;/wiki/Mount_Washington_(New_Hampshire)&#39;, &#39;lat&#39;: 44.2705, &#39;lon&#39;: -71.30324999999999} {&#39;name&#39;: &#39;Mount Adams (New Hampshire)&#39;, &#39;link&#39;: &#39;/wiki/Mount_Adams_(New_Hampshire)&#39;, &#39;lat&#39;: 44.32055555555556, &#39;lon&#39;: -71.29138888888889} {&#39;name&#39;: &#39;Mount Jefferson (New Hampshire)&#39;, &#39;link&#39;: &#39;/wiki/Mount_Jefferson_(New_Hampshire)&#39;, &#39;lat&#39;: 44.30416666666667, &#39;lon&#39;: -71.31694444444445} {&#39;name&#39;: &#39;Mount Monroe (New Hampshire)&#39;, &#39;link&#39;: &#39;/wiki/Mount_Monroe_(New_Hampshire)&#39;, &#39;lat&#39;: 44.25555555555555, &#39;lon&#39;: -71.32249999999999} {&#39;name&#39;: &#39;Mount Madison&#39;, &#39;link&#39;: &#39;/wiki/Mount_Madison&#39;, &#39;lat&#39;: 44.32833333333333, &#39;lon&#39;: -71.27777777777777} {&#39;name&#39;: &#39;Mount Lafayette&#39;, &#39;link&#39;: &#39;/wiki/Mount_Lafayette&#39;, &#39;lat&#39;: 44.16083333333333, &#39;lon&#39;: -71.64444444444445} {&#39;name&#39;: &#39;Mount Lincoln (New Hampshire)&#39;, &#39;link&#39;: &#39;/wiki/Mount_Lincoln_(New_Hampshire)&#39;, &#39;lat&#39;: 44.14888888888889, &#39;lon&#39;: -71.64444444444445} {&#39;name&#39;: &#39;South Twin Mountain (New Hampshire)&#39;, &#39;link&#39;: &#39;/wiki/South_Twin_Mountain_(New_Hampshire)&#39;, &#39;lat&#39;: 44.1875, &#39;lon&#39;: -71.55533333333334} {&#39;name&#39;: &#39;Carter Dome&#39;, &#39;link&#39;: &#39;/wiki/Carter_Dome&#39;, &#39;lat&#39;: 44.26722222222222, &#39;lon&#39;: -71.17888888888889} {&#39;name&#39;: &#39;Mount Moosilauke&#39;, &#39;link&#39;: &#39;/wiki/Mount_Moosilauke&#39;, &#39;lat&#39;: 44.02444444444444, &#39;lon&#39;: -71.83083333333333} CPU times: user 2.44 s, sys: 62.4 ms, total: 2.5 s Wall time: 3.9 s . Results will vary by machine, internet connection, Wikipedia server status, and butterly wing flaps. . Mine were like this the first time around: . txt CPU times: user 2.25 s, sys: 65.1 ms, total: 2.31 s Wall time: 5.47 s . Faster Fetching . We&#39;re not using the asynchronous capabilities of httpx yet, so each of the 10 requests to Wikipedia needs to go over the wire and back in order for the next request to start. . How about we speed things up a little (Jupyter %%time doesn&#39;t work on async cells): . import asyncio async def get_coords(client: httpx.AsyncClient, a_link: BeautifulSoup) -&gt; dict: &quot;&quot;&quot;Given http client and &lt;a&gt; link from wikipedia list, Fetches the place&#39;s html page, Attempts to parse and convert lat and lon to decimal from the page (first occurrence) Returns entry with keys: &quot;name&quot;, &quot;link&quot;, &quot;lat&quot;, &quot;lon&quot; Args: client (httpx.AsyncClient): To make requests. See httpx docs a_link (BeautifulSoup): &lt;a&gt; ... &lt;/a&gt; chunk Returns: dict: coordinate entry for this wikipedia place &quot;&quot;&quot; name = a_link.get(&quot;title&quot;) link = a_link.get(&quot;href&quot;) raw_page = await client.get(BASE_URL + link) raw_soup = BeautifulSoup(raw_page, &quot;html.parser&quot;) raw_lat = raw_soup.find(class_=&quot;latitude&quot;).text.strip() lat = convert(raw_lat) raw_lon = raw_soup.find(class_=&quot;longitude&quot;).text.strip() lon = convert(raw_lon) return {&quot;name&quot;: name, &quot;link&quot;: link, &quot;lat&quot;: lat, &quot;lon&quot;: lon} async def gather_coords(links: list) -&gt; list: &quot;&quot;&quot;Given List of a links, asynchronously fetch all of them and return results&quot;&quot;&quot; async with httpx.AsyncClient() as client: tasks = [asyncio.ensure_future(get_coords(client, link)) for link in links] coords = await asyncio.gather(*tasks) return coords . from timeit import default_timer as timer start = timer() # Async get all lat lon as list of dictionaries coords = await gather_coords(links[:10]) end = timer() print(*coords[:10], f&quot;{end - start :.2f} seconds&quot;, sep=&#39; n&#39;) . {&#39;name&#39;: &#39;Mount Washington (New Hampshire)&#39;, &#39;link&#39;: &#39;/wiki/Mount_Washington_(New_Hampshire)&#39;, &#39;lat&#39;: 44.2705, &#39;lon&#39;: -71.30324999999999} {&#39;name&#39;: &#39;Mount Adams (New Hampshire)&#39;, &#39;link&#39;: &#39;/wiki/Mount_Adams_(New_Hampshire)&#39;, &#39;lat&#39;: 44.32055555555556, &#39;lon&#39;: -71.29138888888889} {&#39;name&#39;: &#39;Mount Jefferson (New Hampshire)&#39;, &#39;link&#39;: &#39;/wiki/Mount_Jefferson_(New_Hampshire)&#39;, &#39;lat&#39;: 44.30416666666667, &#39;lon&#39;: -71.31694444444445} {&#39;name&#39;: &#39;Mount Monroe (New Hampshire)&#39;, &#39;link&#39;: &#39;/wiki/Mount_Monroe_(New_Hampshire)&#39;, &#39;lat&#39;: 44.25555555555555, &#39;lon&#39;: -71.32249999999999} {&#39;name&#39;: &#39;Mount Madison&#39;, &#39;link&#39;: &#39;/wiki/Mount_Madison&#39;, &#39;lat&#39;: 44.32833333333333, &#39;lon&#39;: -71.27777777777777} {&#39;name&#39;: &#39;Mount Lafayette&#39;, &#39;link&#39;: &#39;/wiki/Mount_Lafayette&#39;, &#39;lat&#39;: 44.16083333333333, &#39;lon&#39;: -71.64444444444445} {&#39;name&#39;: &#39;Mount Lincoln (New Hampshire)&#39;, &#39;link&#39;: &#39;/wiki/Mount_Lincoln_(New_Hampshire)&#39;, &#39;lat&#39;: 44.14888888888889, &#39;lon&#39;: -71.64444444444445} {&#39;name&#39;: &#39;South Twin Mountain (New Hampshire)&#39;, &#39;link&#39;: &#39;/wiki/South_Twin_Mountain_(New_Hampshire)&#39;, &#39;lat&#39;: 44.1875, &#39;lon&#39;: -71.55533333333334} {&#39;name&#39;: &#39;Carter Dome&#39;, &#39;link&#39;: &#39;/wiki/Carter_Dome&#39;, &#39;lat&#39;: 44.26722222222222, &#39;lon&#39;: -71.17888888888889} {&#39;name&#39;: &#39;Mount Moosilauke&#39;, &#39;link&#39;: &#39;/wiki/Mount_Moosilauke&#39;, &#39;lat&#39;: 44.02444444444444, &#39;lon&#39;: -71.83083333333333} 2.01 seconds . 2.16 / 5.47 . 0.3948811700182816 . 40% of the time spent scraping data, sounds good to me! . Data Cleaning . If you thought the &quot;finds first occurrence&quot; strategy for scraping latitude and longitude was going to cause errors, cheers to you. . Turns out just a few mountains have multiple peaks that count as 4,000 footers, so these mountains have 2 sets of latitudes and longitudes. . I fetched these by hand and said LGTM with my csv of: . Mountain Names | Heights | Latitudes | Longitudes | . Weather Scraping . I figured there&#39;s probably a free open API for accessing weather data, and a quick google found two that caught my eye: . OpenWeatherMap | Weather.gov | . It&#39;s a free API, but this was the selling point for OpenWeatherMap for this Proof-of-Concept project: . The One Call API provides the following weather data for any geographical coordinates: . Current weather | Minute forecast for 1 hour | Hourly forecast for 48 hours | Daily forecast for 7 days | National weather alerts | Historical weather data for the previous 5 days | . API Signup and Prep . Getting a free account and key was straightforward involving just an email address verification link. . Then off to the races with the following documentation (there&#39;s more on their site in better formatting): . # One Call URL https://api.openweathermap.org/data/2.5/onecall?lat={lat}&amp;lon={lon}&amp;exclude={part}&amp;appid={API key} . Parameters . lat, lon: required Geographical coordinates (latitude, longitude) . appid: required Your unique API key (you can always find it on your account page under the &quot;API key&quot; tab) . from pydantic import BaseSettings class Settings(BaseSettings): &quot;&quot;&quot;Handles fetching configuration from environment variables and secrets. Type-hinting for config as a bonus&quot;&quot;&quot; open_weather_api_key: str settings = Settings() class WeatherUnit: STANDARD = &quot;standard&quot; KELVIN = &quot;standard&quot; METRIC = &quot;metric&quot; IMPERIAL = &quot;imperial&quot; def get_one_call_endpoint( lat: float, lon: float, units: WeatherUnit = WeatherUnit.IMPERIAL, exclude=&quot;&quot;, lang=&quot;en&quot;, ): if exclude != &quot;&quot;: exclude = f&quot;&amp;exclude={exclude}&quot; return f&quot;https://api.openweathermap.org/data/2.5/onecall?lat={lat}&amp;lon={lon}&amp;units={units}{exclude}&amp;lang={lang}&amp;appid={settings.open_weather_api_key}&quot; def get_one_call_data(lat, lon): endpoint = get_one_call_endpoint(lat, lon) response = httpx.get(endpoint) return response.json() . Test One Location . I included some of the API parameters as endpoint configuration options as I messed around with it. . For this use case these defaults are sensible to me: . American users -&gt; units = Imperial | English speaking users -&gt; lang=&quot;en&quot; | Exclude -&gt; don&#39;t care too much about some extra data coming over to the server | . Lets see what we get for a live mountain location! . mount_washington = coords[0] mount_washington . {&#39;name&#39;: &#39;Mount Washington (New Hampshire)&#39;, &#39;link&#39;: &#39;/wiki/Mount_Washington_(New_Hampshire)&#39;, &#39;lat&#39;: 44.2705, &#39;lon&#39;: -71.30324999999999} . get_one_call_data(mount_washington[&#39;lat&#39;], mount_washington[&#39;lon&#39;]) . {&#39;lat&#39;: 44.2705, &#39;lon&#39;: -71.3032, &#39;timezone&#39;: &#39;America/New_York&#39;, &#39;timezone_offset&#39;: -18000, &#39;current&#39;: {&#39;dt&#39;: 1644375343, &#39;sunrise&#39;: 1644321288, &#39;sunset&#39;: 1644357845, &#39;temp&#39;: 11.35, &#39;feels_like&#39;: -0.72, &#39;pressure&#39;: 1011, &#39;humidity&#39;: 84, &#39;dew_point&#39;: 7.88, &#39;uvi&#39;: 0, &#39;clouds&#39;: 99, &#39;visibility&#39;: 300, &#39;wind_speed&#39;: 8.5, &#39;wind_deg&#39;: 300, &#39;wind_gust&#39;: 15.79, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13n&#39;}], &#39;snow&#39;: {&#39;1h&#39;: 0.19}}, &#39;minutely&#39;: [{&#39;dt&#39;: 1644375360, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644375420, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644375480, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644375540, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644375600, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644375660, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644375720, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644375780, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644375840, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644375900, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644375960, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644376020, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644376080, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644376140, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644376200, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644376260, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644376320, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644376380, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644376440, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644376500, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644376560, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644376620, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644376680, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644376740, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644376800, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644376860, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644376920, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644376980, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644377040, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644377100, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644377160, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644377220, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644377280, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644377340, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644377400, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644377460, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644377520, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644377580, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644377640, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644377700, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644377760, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644377820, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644377880, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644377940, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644378000, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644378060, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644378120, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644378180, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644378240, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644378300, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644378360, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644378420, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644378480, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644378540, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644378600, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644378660, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644378720, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644378780, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644378840, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644378900, &#39;precipitation&#39;: 0}, {&#39;dt&#39;: 1644378960, &#39;precipitation&#39;: 0}], &#39;hourly&#39;: [{&#39;dt&#39;: 1644372000, &#39;temp&#39;: 10.76, &#39;feels_like&#39;: -1.25, &#39;pressure&#39;: 1011, &#39;humidity&#39;: 87, &#39;dew_point&#39;: 7.99, &#39;uvi&#39;: 0, &#39;clouds&#39;: 99, &#39;visibility&#39;: 353, &#39;wind_speed&#39;: 8.25, &#39;wind_deg&#39;: 300, &#39;wind_gust&#39;: 15.05, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13n&#39;}], &#39;pop&#39;: 0.33, &#39;snow&#39;: {&#39;1h&#39;: 0.22}}, {&#39;dt&#39;: 1644375600, &#39;temp&#39;: 11.35, &#39;feels_like&#39;: -0.72, &#39;pressure&#39;: 1011, &#39;humidity&#39;: 84, &#39;dew_point&#39;: 7.88, &#39;uvi&#39;: 0, &#39;clouds&#39;: 99, &#39;visibility&#39;: 300, &#39;wind_speed&#39;: 8.5, &#39;wind_deg&#39;: 300, &#39;wind_gust&#39;: 15.79, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13n&#39;}], &#39;pop&#39;: 0.33, &#39;snow&#39;: {&#39;1h&#39;: 0.19}}, {&#39;dt&#39;: 1644379200, &#39;temp&#39;: 10.33, &#39;feels_like&#39;: -1.82, &#39;pressure&#39;: 1011, &#39;humidity&#39;: 86, &#39;dew_point&#39;: 7.34, &#39;uvi&#39;: 0, &#39;clouds&#39;: 99, &#39;visibility&#39;: 338, &#39;wind_speed&#39;: 8.32, &#39;wind_deg&#39;: 303, &#39;wind_gust&#39;: 15.97, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13n&#39;}], &#39;pop&#39;: 0.33, &#39;snow&#39;: {&#39;1h&#39;: 0.24}}, {&#39;dt&#39;: 1644382800, &#39;temp&#39;: 9.09, &#39;feels_like&#39;: -3.19, &#39;pressure&#39;: 1011, &#39;humidity&#39;: 89, &#39;dew_point&#39;: 6.78, &#39;uvi&#39;: 0, &#39;clouds&#39;: 99, &#39;visibility&#39;: 302, &#39;wind_speed&#39;: 8.14, &#39;wind_deg&#39;: 300, &#39;wind_gust&#39;: 15.41, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13n&#39;}], &#39;pop&#39;: 0.33, &#39;snow&#39;: {&#39;1h&#39;: 0.17}}, {&#39;dt&#39;: 1644386400, &#39;temp&#39;: 7.93, &#39;feels_like&#39;: -4.67, &#39;pressure&#39;: 1012, &#39;humidity&#39;: 90, &#39;dew_point&#39;: 5.86, &#39;uvi&#39;: 0, &#39;clouds&#39;: 98, &#39;visibility&#39;: 319, &#39;wind_speed&#39;: 8.43, &#39;wind_deg&#39;: 300, &#39;wind_gust&#39;: 16.02, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13n&#39;}], &#39;pop&#39;: 0.33, &#39;snow&#39;: {&#39;1h&#39;: 0.18}}, {&#39;dt&#39;: 1644390000, &#39;temp&#39;: 6.48, &#39;feels_like&#39;: -6.12, &#39;pressure&#39;: 1012, &#39;humidity&#39;: 92, &#39;dew_point&#39;: 4.84, &#39;uvi&#39;: 0, &#39;clouds&#39;: 96, &#39;visibility&#39;: 417, &#39;wind_speed&#39;: 8.43, &#39;wind_deg&#39;: 303, &#39;wind_gust&#39;: 15.66, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13n&#39;}], &#39;pop&#39;: 0.21, &#39;snow&#39;: {&#39;1h&#39;: 0.16}}, {&#39;dt&#39;: 1644393600, &#39;temp&#39;: 4.3, &#39;feels_like&#39;: -8.3, &#39;pressure&#39;: 1013, &#39;humidity&#39;: 95, &#39;dew_point&#39;: 11.14, &#39;uvi&#39;: 0, &#39;clouds&#39;: 94, &#39;visibility&#39;: 761, &#39;wind_speed&#39;: 7.81, &#39;wind_deg&#39;: 302, &#39;wind_gust&#39;: 14.2, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04n&#39;}], &#39;pop&#39;: 0.09}, {&#39;dt&#39;: 1644397200, &#39;temp&#39;: 4.03, &#39;feels_like&#39;: -8.57, &#39;pressure&#39;: 1013, &#39;humidity&#39;: 94, &#39;dew_point&#39;: 10.85, &#39;uvi&#39;: 0, &#39;clouds&#39;: 92, &#39;visibility&#39;: 975, &#39;wind_speed&#39;: 7.4, &#39;wind_deg&#39;: 302, &#39;wind_gust&#39;: 13.35, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04n&#39;}], &#39;pop&#39;: 0.09}, {&#39;dt&#39;: 1644400800, &#39;temp&#39;: 3.79, &#39;feels_like&#39;: -8.52, &#39;pressure&#39;: 1014, &#39;humidity&#39;: 95, &#39;dew_point&#39;: 10.58, &#39;uvi&#39;: 0, &#39;clouds&#39;: 94, &#39;visibility&#39;: 1495, &#39;wind_speed&#39;: 7.02, &#39;wind_deg&#39;: 296, &#39;wind_gust&#39;: 11.65, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04n&#39;}], &#39;pop&#39;: 0.04}, {&#39;dt&#39;: 1644404400, &#39;temp&#39;: 3.38, &#39;feels_like&#39;: -8.12, &#39;pressure&#39;: 1016, &#39;humidity&#39;: 95, &#39;dew_point&#39;: 10.27, &#39;uvi&#39;: 0, &#39;clouds&#39;: 95, &#39;visibility&#39;: 1822, &#39;wind_speed&#39;: 6.22, &#39;wind_deg&#39;: 295, &#39;wind_gust&#39;: 10.11, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04n&#39;}], &#39;pop&#39;: 0.04}, {&#39;dt&#39;: 1644408000, &#39;temp&#39;: 2.26, &#39;feels_like&#39;: -8.12, &#39;pressure&#39;: 1017, &#39;humidity&#39;: 96, &#39;dew_point&#39;: 9.19, &#39;uvi&#39;: 0, &#39;clouds&#39;: 96, &#39;visibility&#39;: 5758, &#39;wind_speed&#39;: 5.19, &#39;wind_deg&#39;: 298, &#39;wind_gust&#39;: 7.99, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04d&#39;}], &#39;pop&#39;: 0.04}, {&#39;dt&#39;: 1644411600, &#39;temp&#39;: 3.88, &#39;feels_like&#39;: -5.91, &#39;pressure&#39;: 1017, &#39;humidity&#39;: 94, &#39;dew_point&#39;: 10.62, &#39;uvi&#39;: 0.35, &#39;clouds&#39;: 89, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 4.97, &#39;wind_deg&#39;: 305, &#39;wind_gust&#39;: 8.77, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04d&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644415200, &#39;temp&#39;: 7.86, &#39;feels_like&#39;: -1.5, &#39;pressure&#39;: 1017, &#39;humidity&#39;: 84, &#39;dew_point&#39;: 12.45, &#39;uvi&#39;: 0.9, &#39;clouds&#39;: 71, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 5.17, &#39;wind_deg&#39;: 301, &#39;wind_gust&#39;: 7.63, &#39;weather&#39;: [{&#39;id&#39;: 803, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;broken clouds&#39;, &#39;icon&#39;: &#39;04d&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644418800, &#39;temp&#39;: 11.75, &#39;feels_like&#39;: 3.81, &#39;pressure&#39;: 1016, &#39;humidity&#39;: 76, &#39;dew_point&#39;: 13.91, &#39;uvi&#39;: 1.59, &#39;clouds&#39;: 52, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 4.61, &#39;wind_deg&#39;: 311, &#39;wind_gust&#39;: 6.82, &#39;weather&#39;: [{&#39;id&#39;: 803, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;broken clouds&#39;, &#39;icon&#39;: &#39;04d&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644422400, &#39;temp&#39;: 14.92, &#39;feels_like&#39;: 9.14, &#39;pressure&#39;: 1016, &#39;humidity&#39;: 71, &#39;dew_point&#39;: 15.62, &#39;uvi&#39;: 2.16, &#39;clouds&#39;: 56, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 3.49, &#39;wind_deg&#39;: 304, &#39;wind_gust&#39;: 4.79, &#39;weather&#39;: [{&#39;id&#39;: 803, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;broken clouds&#39;, &#39;icon&#39;: &#39;04d&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644426000, &#39;temp&#39;: 17.1, &#39;feels_like&#39;: 17.1, &#39;pressure&#39;: 1015, &#39;humidity&#39;: 70, &#39;dew_point&#39;: 17.31, &#39;uvi&#39;: 2.29, &#39;clouds&#39;: 64, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 2.44, &#39;wind_deg&#39;: 283, &#39;wind_gust&#39;: 3.87, &#39;weather&#39;: [{&#39;id&#39;: 803, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;broken clouds&#39;, &#39;icon&#39;: &#39;04d&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644429600, &#39;temp&#39;: 18.88, &#39;feels_like&#39;: 18.88, &#39;pressure&#39;: 1014, &#39;humidity&#39;: 68, &#39;dew_point&#39;: 18.59, &#39;uvi&#39;: 1.95, &#39;clouds&#39;: 67, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 2.1, &#39;wind_deg&#39;: 270, &#39;wind_gust&#39;: 3.51, &#39;weather&#39;: [{&#39;id&#39;: 803, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;broken clouds&#39;, &#39;icon&#39;: &#39;04d&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644433200, &#39;temp&#39;: 19.72, &#39;feels_like&#39;: 19.72, &#39;pressure&#39;: 1014, &#39;humidity&#39;: 68, &#39;dew_point&#39;: 19.26, &#39;uvi&#39;: 1.2, &#39;clouds&#39;: 98, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 2.01, &#39;wind_deg&#39;: 226, &#39;wind_gust&#39;: 3.6, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04d&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644436800, &#39;temp&#39;: 19.83, &#39;feels_like&#39;: 19.83, &#39;pressure&#39;: 1013, &#39;humidity&#39;: 72, &#39;dew_point&#39;: 20.84, &#39;uvi&#39;: 0.58, &#39;clouds&#39;: 95, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 2.77, &#39;wind_deg&#39;: 185, &#39;wind_gust&#39;: 4.38, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04d&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644440400, &#39;temp&#39;: 18.39, &#39;feels_like&#39;: 13.32, &#39;pressure&#39;: 1013, &#39;humidity&#39;: 84, &#39;dew_point&#39;: 23.11, &#39;uvi&#39;: 0.17, &#39;clouds&#39;: 70, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 3.36, &#39;wind_deg&#39;: 185, &#39;wind_gust&#39;: 5.3, &#39;weather&#39;: [{&#39;id&#39;: 803, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;broken clouds&#39;, &#39;icon&#39;: &#39;04d&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644444000, &#39;temp&#39;: 11.05, &#39;feels_like&#39;: 11.05, &#39;pressure&#39;: 1014, &#39;humidity&#39;: 95, &#39;dew_point&#39;: 18.41, &#39;uvi&#39;: 0, &#39;clouds&#39;: 55, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 2.82, &#39;wind_deg&#39;: 191, &#39;wind_gust&#39;: 2.77, &#39;weather&#39;: [{&#39;id&#39;: 803, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;broken clouds&#39;, &#39;icon&#39;: &#39;04d&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644447600, &#39;temp&#39;: 8.55, &#39;feels_like&#39;: 8.55, &#39;pressure&#39;: 1015, &#39;humidity&#39;: 96, &#39;dew_point&#39;: 16.05, &#39;uvi&#39;: 0, &#39;clouds&#39;: 48, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 2.89, &#39;wind_deg&#39;: 185, &#39;wind_gust&#39;: 3.04, &#39;weather&#39;: [{&#39;id&#39;: 802, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;scattered clouds&#39;, &#39;icon&#39;: &#39;03n&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644451200, &#39;temp&#39;: 9.16, &#39;feels_like&#39;: 1.51, &#39;pressure&#39;: 1015, &#39;humidity&#39;: 96, &#39;dew_point&#39;: 16.72, &#39;uvi&#39;: 0, &#39;clouds&#39;: 56, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 4.12, &#39;wind_deg&#39;: 177, &#39;wind_gust&#39;: 6.71, &#39;weather&#39;: [{&#39;id&#39;: 803, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;broken clouds&#39;, &#39;icon&#39;: &#39;04n&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644454800, &#39;temp&#39;: 9.46, &#39;feels_like&#39;: 1.56, &#39;pressure&#39;: 1015, &#39;humidity&#39;: 96, &#39;dew_point&#39;: 16.95, &#39;uvi&#39;: 0, &#39;clouds&#39;: 100, &#39;visibility&#39;: 9935, &#39;wind_speed&#39;: 4.32, &#39;wind_deg&#39;: 179, &#39;wind_gust&#39;: 7.67, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04n&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644458400, &#39;temp&#39;: 9.12, &#39;feels_like&#39;: 1.67, &#39;pressure&#39;: 1015, &#39;humidity&#39;: 94, &#39;dew_point&#39;: 16.07, &#39;uvi&#39;: 0, &#39;clouds&#39;: 100, &#39;visibility&#39;: 9789, &#39;wind_speed&#39;: 3.98, &#39;wind_deg&#39;: 182, &#39;wind_gust&#39;: 6.71, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04n&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644462000, &#39;temp&#39;: 9.39, &#39;feels_like&#39;: 2.62, &#39;pressure&#39;: 1014, &#39;humidity&#39;: 92, &#39;dew_point&#39;: 16.05, &#39;uvi&#39;: 0, &#39;clouds&#39;: 100, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 3.6, &#39;wind_deg&#39;: 199, &#39;wind_gust&#39;: 4.16, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04n&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644465600, &#39;temp&#39;: 10.08, &#39;feels_like&#39;: 3.63, &#39;pressure&#39;: 1013, &#39;humidity&#39;: 92, &#39;dew_point&#39;: 16.77, &#39;uvi&#39;: 0, &#39;clouds&#39;: 100, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 3.47, &#39;wind_deg&#39;: 209, &#39;wind_gust&#39;: 4.21, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04n&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644469200, &#39;temp&#39;: 10.22, &#39;feels_like&#39;: 3.69, &#39;pressure&#39;: 1013, &#39;humidity&#39;: 92, &#39;dew_point&#39;: 16.92, &#39;uvi&#39;: 0, &#39;clouds&#39;: 99, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 3.53, &#39;wind_deg&#39;: 205, &#39;wind_gust&#39;: 4.29, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04n&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644472800, &#39;temp&#39;: 9.5, &#39;feels_like&#39;: 2.26, &#39;pressure&#39;: 1012, &#39;humidity&#39;: 92, &#39;dew_point&#39;: 16.18, &#39;uvi&#39;: 0, &#39;clouds&#39;: 87, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 3.89, &#39;wind_deg&#39;: 213, &#39;wind_gust&#39;: 3.74, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04n&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644476400, &#39;temp&#39;: 9.05, &#39;feels_like&#39;: 2.03, &#39;pressure&#39;: 1012, &#39;humidity&#39;: 93, &#39;dew_point&#39;: 15.87, &#39;uvi&#39;: 0, &#39;clouds&#39;: 22, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 3.71, &#39;wind_deg&#39;: 220, &#39;wind_gust&#39;: 3.71, &#39;weather&#39;: [{&#39;id&#39;: 801, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;few clouds&#39;, &#39;icon&#39;: &#39;02n&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644480000, &#39;temp&#39;: 8.8, &#39;feels_like&#39;: 2.21, &#39;pressure&#39;: 1011, &#39;humidity&#39;: 92, &#39;dew_point&#39;: 15.4, &#39;uvi&#39;: 0, &#39;clouds&#39;: 27, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 3.44, &#39;wind_deg&#39;: 230, &#39;wind_gust&#39;: 3.56, &#39;weather&#39;: [{&#39;id&#39;: 802, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;scattered clouds&#39;, &#39;icon&#39;: &#39;03n&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644483600, &#39;temp&#39;: 10.08, &#39;feels_like&#39;: 3.76, &#39;pressure&#39;: 1010, &#39;humidity&#39;: 91, &#39;dew_point&#39;: 16.47, &#39;uvi&#39;: 0, &#39;clouds&#39;: 51, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 3.4, &#39;wind_deg&#39;: 230, &#39;wind_gust&#39;: 3.51, &#39;weather&#39;: [{&#39;id&#39;: 803, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;broken clouds&#39;, &#39;icon&#39;: &#39;04n&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644487200, &#39;temp&#39;: 11.68, &#39;feels_like&#39;: 5.83, &#39;pressure&#39;: 1010, &#39;humidity&#39;: 90, &#39;dew_point&#39;: 17.89, &#39;uvi&#39;: 0, &#39;clouds&#39;: 64, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 3.27, &#39;wind_deg&#39;: 223, &#39;wind_gust&#39;: 3.18, &#39;weather&#39;: [{&#39;id&#39;: 803, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;broken clouds&#39;, &#39;icon&#39;: &#39;04n&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644490800, &#39;temp&#39;: 12.47, &#39;feels_like&#39;: 6.19, &#39;pressure&#39;: 1009, &#39;humidity&#39;: 90, &#39;dew_point&#39;: 18.73, &#39;uvi&#39;: 0, &#39;clouds&#39;: 71, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 3.58, &#39;wind_deg&#39;: 223, &#39;wind_gust&#39;: 3.8, &#39;weather&#39;: [{&#39;id&#39;: 803, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;broken clouds&#39;, &#39;icon&#39;: &#39;04n&#39;}], &#39;pop&#39;: 0}, {&#39;dt&#39;: 1644494400, &#39;temp&#39;: 13.1, &#39;feels_like&#39;: 7.18, &#39;pressure&#39;: 1009, &#39;humidity&#39;: 94, &#39;dew_point&#39;: 20.43, &#39;uvi&#39;: 0, &#39;clouds&#39;: 76, &#39;visibility&#39;: 856, &#39;wind_speed&#39;: 3.42, &#39;wind_deg&#39;: 224, &#39;wind_gust&#39;: 3.69, &#39;weather&#39;: [{&#39;id&#39;: 803, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;broken clouds&#39;, &#39;icon&#39;: &#39;04d&#39;}], &#39;pop&#39;: 0.09}, {&#39;dt&#39;: 1644498000, &#39;temp&#39;: 16.45, &#39;feels_like&#39;: 11.53, &#39;pressure&#39;: 1008, &#39;humidity&#39;: 96, &#39;dew_point&#39;: 24.35, &#39;uvi&#39;: 0.23, &#39;clouds&#39;: 100, &#39;visibility&#39;: 619, &#39;wind_speed&#39;: 3.11, &#39;wind_deg&#39;: 222, &#39;wind_gust&#39;: 5.57, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13d&#39;}], &#39;pop&#39;: 0.55, &#39;snow&#39;: {&#39;1h&#39;: 0.17}}, {&#39;dt&#39;: 1644501600, &#39;temp&#39;: 18.79, &#39;feels_like&#39;: 13.89, &#39;pressure&#39;: 1008, &#39;humidity&#39;: 95, &#39;dew_point&#39;: 26.6, &#39;uvi&#39;: 0.58, &#39;clouds&#39;: 100, &#39;visibility&#39;: 6348, &#39;wind_speed&#39;: 3.29, &#39;wind_deg&#39;: 214, &#39;wind_gust&#39;: 5.3, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04d&#39;}], &#39;pop&#39;: 0.42}, {&#39;dt&#39;: 1644505200, &#39;temp&#39;: 20.39, &#39;feels_like&#39;: 14.59, &#39;pressure&#39;: 1007, &#39;humidity&#39;: 95, &#39;dew_point&#39;: 28.13, &#39;uvi&#39;: 1.01, &#39;clouds&#39;: 100, &#39;visibility&#39;: 10000, &#39;wind_speed&#39;: 4.05, &#39;wind_deg&#39;: 199, &#39;wind_gust&#39;: 6.71, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04d&#39;}], &#39;pop&#39;: 0.38}, {&#39;dt&#39;: 1644508800, &#39;temp&#39;: 21.81, &#39;feels_like&#39;: 15.03, &#39;pressure&#39;: 1006, &#39;humidity&#39;: 94, &#39;dew_point&#39;: 29.3, &#39;uvi&#39;: 1.04, &#39;clouds&#39;: 94, &#39;visibility&#39;: 4548, &#39;wind_speed&#39;: 5.08, &#39;wind_deg&#39;: 196, &#39;wind_gust&#39;: 9.06, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04d&#39;}], &#39;pop&#39;: 0.25}, {&#39;dt&#39;: 1644512400, &#39;temp&#39;: 22.01, &#39;feels_like&#39;: 14.76, &#39;pressure&#39;: 1005, &#39;humidity&#39;: 92, &#39;dew_point&#39;: 28.96, &#39;uvi&#39;: 1.1, &#39;clouds&#39;: 91, &#39;visibility&#39;: 2107, &#39;wind_speed&#39;: 5.57, &#39;wind_deg&#39;: 197, &#39;wind_gust&#39;: 12.86, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04d&#39;}], &#39;pop&#39;: 0.23}, {&#39;dt&#39;: 1644516000, &#39;temp&#39;: 21.06, &#39;feels_like&#39;: 13.69, &#39;pressure&#39;: 1004, &#39;humidity&#39;: 99, &#39;dew_point&#39;: 29.71, &#39;uvi&#39;: 0.94, &#39;clouds&#39;: 93, &#39;visibility&#39;: 53, &#39;wind_speed&#39;: 5.5, &#39;wind_deg&#39;: 194, &#39;wind_gust&#39;: 10.96, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13d&#39;}], &#39;pop&#39;: 0.35, &#39;snow&#39;: {&#39;1h&#39;: 0.31}}, {&#39;dt&#39;: 1644519600, &#39;temp&#39;: 20.07, &#39;feels_like&#39;: 12.65, &#39;pressure&#39;: 1004, &#39;humidity&#39;: 99, &#39;dew_point&#39;: 28.72, &#39;uvi&#39;: 0.27, &#39;clouds&#39;: 100, &#39;visibility&#39;: 76, &#39;wind_speed&#39;: 5.37, &#39;wind_deg&#39;: 216, &#39;wind_gust&#39;: 13.85, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13d&#39;}], &#39;pop&#39;: 0.68, &#39;snow&#39;: {&#39;1h&#39;: 0.36}}, {&#39;dt&#39;: 1644523200, &#39;temp&#39;: 19.6, &#39;feels_like&#39;: 12.4, &#39;pressure&#39;: 1004, &#39;humidity&#39;: 95, &#39;dew_point&#39;: 27.32, &#39;uvi&#39;: 0.14, &#39;clouds&#39;: 100, &#39;visibility&#39;: 255, &#39;wind_speed&#39;: 5.1, &#39;wind_deg&#39;: 240, &#39;wind_gust&#39;: 14, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13d&#39;}], &#39;pop&#39;: 0.6, &#39;snow&#39;: {&#39;1h&#39;: 0.21}}, {&#39;dt&#39;: 1644526800, &#39;temp&#39;: 18.72, &#39;feels_like&#39;: 11.3, &#39;pressure&#39;: 1005, &#39;humidity&#39;: 94, &#39;dew_point&#39;: 26.04, &#39;uvi&#39;: 0.04, &#39;clouds&#39;: 100, &#39;visibility&#39;: 781, &#39;wind_speed&#39;: 5.14, &#39;wind_deg&#39;: 254, &#39;wind_gust&#39;: 15.99, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13d&#39;}], &#39;pop&#39;: 0.7, &#39;snow&#39;: {&#39;1h&#39;: 0.14}}, {&#39;dt&#39;: 1644530400, &#39;temp&#39;: 16.41, &#39;feels_like&#39;: 9.25, &#39;pressure&#39;: 1005, &#39;humidity&#39;: 96, &#39;dew_point&#39;: 24.3, &#39;uvi&#39;: 0, &#39;clouds&#39;: 100, &#39;visibility&#39;: 645, &#39;wind_speed&#39;: 4.61, &#39;wind_deg&#39;: 261, &#39;wind_gust&#39;: 9.51, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13d&#39;}], &#39;pop&#39;: 0.69, &#39;snow&#39;: {&#39;1h&#39;: 0.16}}, {&#39;dt&#39;: 1644534000, &#39;temp&#39;: 14.34, &#39;feels_like&#39;: 5.86, &#39;pressure&#39;: 1007, &#39;humidity&#39;: 95, &#39;dew_point&#39;: 21.97, &#39;uvi&#39;: 0, &#39;clouds&#39;: 99, &#39;visibility&#39;: 689, &#39;wind_speed&#39;: 5.39, &#39;wind_deg&#39;: 260, &#39;wind_gust&#39;: 12.37, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13n&#39;}], &#39;pop&#39;: 0.66, &#39;snow&#39;: {&#39;1h&#39;: 0.11}}, {&#39;dt&#39;: 1644537600, &#39;temp&#39;: 14.02, &#39;feels_like&#39;: 4.87, &#39;pressure&#39;: 1007, &#39;humidity&#39;: 94, &#39;dew_point&#39;: 21.47, &#39;uvi&#39;: 0, &#39;clouds&#39;: 99, &#39;visibility&#39;: 282, &#39;wind_speed&#39;: 5.95, &#39;wind_deg&#39;: 257, &#39;wind_gust&#39;: 16.06, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13n&#39;}], &#39;pop&#39;: 0.58, &#39;snow&#39;: {&#39;1h&#39;: 0.26}}, {&#39;dt&#39;: 1644541200, &#39;temp&#39;: 13.08, &#39;feels_like&#39;: 3.52, &#39;pressure&#39;: 1008, &#39;humidity&#39;: 94, &#39;dew_point&#39;: 20.55, &#39;uvi&#39;: 0, &#39;clouds&#39;: 100, &#39;visibility&#39;: 248, &#39;wind_speed&#39;: 6.17, &#39;wind_deg&#39;: 261, &#39;wind_gust&#39;: 16.87, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13n&#39;}], &#39;pop&#39;: 0.42, &#39;snow&#39;: {&#39;1h&#39;: 0.28}}], &#39;daily&#39;: [{&#39;dt&#39;: 1644336000, &#39;sunrise&#39;: 1644321288, &#39;sunset&#39;: 1644357845, &#39;moonrise&#39;: 1644334440, &#39;moonset&#39;: 1644298020, &#39;moon_phase&#39;: 0.25, &#39;temp&#39;: {&#39;day&#39;: 18.59, &#39;min&#39;: 10.33, &#39;max&#39;: 19.72, &#39;night&#39;: 10.33, &#39;eve&#39;: 15.06, &#39;morn&#39;: 14.94}, &#39;feels_like&#39;: {&#39;day&#39;: 12.94, &#39;night&#39;: -1.82, &#39;eve&#39;: 5.97, &#39;morn&#39;: 14.94}, &#39;pressure&#39;: 1010, &#39;humidity&#39;: 97, &#39;dew_point&#39;: 26.85, &#39;wind_speed&#39;: 8.5, &#39;wind_deg&#39;: 300, &#39;wind_gust&#39;: 15.97, &#39;weather&#39;: [{&#39;id&#39;: 601, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;snow&#39;, &#39;icon&#39;: &#39;13d&#39;}], &#39;clouds&#39;: 100, &#39;pop&#39;: 0.99, &#39;snow&#39;: 10.77, &#39;uvi&#39;: 1.2}, {&#39;dt&#39;: 1644422400, &#39;sunrise&#39;: 1644407609, &#39;sunset&#39;: 1644444329, &#39;moonrise&#39;: 1644422460, &#39;moonset&#39;: 1644388320, &#39;moon_phase&#39;: 0.28, &#39;temp&#39;: {&#39;day&#39;: 14.92, &#39;min&#39;: 2.26, &#39;max&#39;: 19.83, &#39;night&#39;: 10.08, &#39;eve&#39;: 11.05, &#39;morn&#39;: 3.79}, &#39;feels_like&#39;: {&#39;day&#39;: 9.14, &#39;night&#39;: 3.63, &#39;eve&#39;: 11.05, &#39;morn&#39;: -8.52}, &#39;pressure&#39;: 1016, &#39;humidity&#39;: 71, &#39;dew_point&#39;: 15.62, &#39;wind_speed&#39;: 8.43, &#39;wind_deg&#39;: 300, &#39;wind_gust&#39;: 16.02, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13d&#39;}], &#39;clouds&#39;: 56, &#39;pop&#39;: 0.33, &#39;snow&#39;: 0.51, &#39;uvi&#39;: 2.29}, {&#39;dt&#39;: 1644508800, &#39;sunrise&#39;: 1644493928, &#39;sunset&#39;: 1644530813, &#39;moonrise&#39;: 1644510840, &#39;moonset&#39;: 1644478500, &#39;moon_phase&#39;: 0.31, &#39;temp&#39;: {&#39;day&#39;: 21.81, &#39;min&#39;: 8.8, &#39;max&#39;: 22.01, &#39;night&#39;: 9.46, &#39;eve&#39;: 16.41, &#39;morn&#39;: 11.68}, &#39;feels_like&#39;: {&#39;day&#39;: 15.03, &#39;night&#39;: 0.05, &#39;eve&#39;: 9.25, &#39;morn&#39;: 5.83}, &#39;pressure&#39;: 1006, &#39;humidity&#39;: 94, &#39;dew_point&#39;: 29.3, &#39;wind_speed&#39;: 6.2, &#39;wind_deg&#39;: 272, &#39;wind_gust&#39;: 17, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13d&#39;}], &#39;clouds&#39;: 94, &#39;pop&#39;: 0.7, &#39;snow&#39;: 2.27, &#39;uvi&#39;: 1.1}, {&#39;dt&#39;: 1644595200, &#39;sunrise&#39;: 1644580246, &#39;sunset&#39;: 1644617298, &#39;moonrise&#39;: 1644599520, &#39;moonset&#39;: 1644568620, &#39;moon_phase&#39;: 0.34, &#39;temp&#39;: {&#39;day&#39;: 15.17, &#39;min&#39;: 2.52, &#39;max&#39;: 16.65, &#39;night&#39;: 11.16, &#39;eve&#39;: 14.95, &#39;morn&#39;: 5.09}, &#39;feels_like&#39;: {&#39;day&#39;: 9.57, &#39;night&#39;: 2.14, &#39;eve&#39;: 7.18, &#39;morn&#39;: -3.42}, &#39;pressure&#39;: 1014, &#39;humidity&#39;: 76, &#39;dew_point&#39;: 17.38, &#39;wind_speed&#39;: 5.55, &#39;wind_deg&#39;: 191, &#39;wind_gust&#39;: 11.25, &#39;weather&#39;: [{&#39;id&#39;: 802, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;scattered clouds&#39;, &#39;icon&#39;: &#39;03d&#39;}], &#39;clouds&#39;: 47, &#39;pop&#39;: 0.34, &#39;uvi&#39;: 1.75}, {&#39;dt&#39;: 1644681600, &#39;sunrise&#39;: 1644666563, &#39;sunset&#39;: 1644703782, &#39;moonrise&#39;: 1644688800, &#39;moonset&#39;: 1644658320, &#39;moon_phase&#39;: 0.37, &#39;temp&#39;: {&#39;day&#39;: 21.24, &#39;min&#39;: -10.28, &#39;max&#39;: 21.61, &#39;night&#39;: -10.28, &#39;eve&#39;: 7.41, &#39;morn&#39;: 19.63}, &#39;feels_like&#39;: {&#39;day&#39;: 12.07, &#39;night&#39;: -22.88, &#39;eve&#39;: -5.19, &#39;morn&#39;: 10.44}, &#39;pressure&#39;: 1010, &#39;humidity&#39;: 98, &#39;dew_point&#39;: 29.59, &#39;wind_speed&#39;: 10.74, &#39;wind_deg&#39;: 267, &#39;wind_gust&#39;: 36.6, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13d&#39;}], &#39;clouds&#39;: 100, &#39;pop&#39;: 0.66, &#39;snow&#39;: 2.45, &#39;uvi&#39;: 0.74}, {&#39;dt&#39;: 1644768000, &#39;sunrise&#39;: 1644752878, &#39;sunset&#39;: 1644790266, &#39;moonrise&#39;: 1644778560, &#39;moonset&#39;: 1644747720, &#39;moon_phase&#39;: 0.4, &#39;temp&#39;: {&#39;day&#39;: -4.45, &#39;min&#39;: -12.17, &#39;max&#39;: 0.68, &#39;night&#39;: -6.97, &#39;eve&#39;: 0.23, &#39;morn&#39;: -11.9}, &#39;feels_like&#39;: {&#39;day&#39;: -4.45, &#39;night&#39;: -6.97, &#39;eve&#39;: 0.23, &#39;morn&#39;: -24.5}, &#39;pressure&#39;: 1029, &#39;humidity&#39;: 65, &#39;dew_point&#39;: -6.56, &#39;wind_speed&#39;: 6.91, &#39;wind_deg&#39;: 319, &#39;wind_gust&#39;: 9.95, &#39;weather&#39;: [{&#39;id&#39;: 804, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;overcast clouds&#39;, &#39;icon&#39;: &#39;04d&#39;}], &#39;clouds&#39;: 100, &#39;pop&#39;: 0, &#39;uvi&#39;: 1}, {&#39;dt&#39;: 1644854400, &#39;sunrise&#39;: 1644839191, &#39;sunset&#39;: 1644876749, &#39;moonrise&#39;: 1644868680, &#39;moonset&#39;: 1644836640, &#39;moon_phase&#39;: 0.44, &#39;temp&#39;: {&#39;day&#39;: -5.12, &#39;min&#39;: -13.97, &#39;max&#39;: -2, &#39;night&#39;: -9.49, &#39;eve&#39;: -3.84, &#39;morn&#39;: -10.5}, &#39;feels_like&#39;: {&#39;day&#39;: -16.47, &#39;night&#39;: -19.82, &#39;eve&#39;: -16.44, &#39;morn&#39;: -19.3}, &#39;pressure&#39;: 1020, &#39;humidity&#39;: 69, &#39;dew_point&#39;: -6.23, &#39;wind_speed&#39;: 6.2, &#39;wind_deg&#39;: 308, &#39;wind_gust&#39;: 8.72, &#39;weather&#39;: [{&#39;id&#39;: 801, &#39;main&#39;: &#39;Clouds&#39;, &#39;description&#39;: &#39;few clouds&#39;, &#39;icon&#39;: &#39;02d&#39;}], &#39;clouds&#39;: 18, &#39;pop&#39;: 0, &#39;uvi&#39;: 1}, {&#39;dt&#39;: 1644940800, &#39;sunrise&#39;: 1644925504, &#39;sunset&#39;: 1644963233, &#39;moonrise&#39;: 1644959040, &#39;moonset&#39;: 1644925140, &#39;moon_phase&#39;: 0.47, &#39;temp&#39;: {&#39;day&#39;: -2.83, &#39;min&#39;: -8.66, &#39;max&#39;: 1.02, &#39;night&#39;: -2.72, &#39;eve&#39;: 0.75, &#39;morn&#39;: -5.62}, &#39;feels_like&#39;: {&#39;day&#39;: -15.43, &#39;night&#39;: -11.79, &#39;eve&#39;: -7.58, &#39;morn&#39;: -16.47}, &#39;pressure&#39;: 1030, &#39;humidity&#39;: 79, &#39;dew_point&#39;: -0.74, &#39;wind_speed&#39;: 9.37, &#39;wind_deg&#39;: 303, &#39;wind_gust&#39;: 26.06, &#39;weather&#39;: [{&#39;id&#39;: 600, &#39;main&#39;: &#39;Snow&#39;, &#39;description&#39;: &#39;light snow&#39;, &#39;icon&#39;: &#39;13d&#39;}], &#39;clouds&#39;: 100, &#39;pop&#39;: 0.26, &#39;snow&#39;: 0.62, &#39;uvi&#39;: 1}]} . . Fetch for Many Locations . Using the same scaffolding as the Wikipedia asynchronous scrape, the helper code for the main streamlit app also relies on httpx to fetch 48 responses quickly. . async def async_get_one_call_data(client: httpx.AsyncClient, lat: float, lon: float) -&gt; dict: &quot;&quot;&quot;Given http client and valid lat lon, retrieves open weather &quot;One call&quot; API data Args: client (httpx.AsyncClient): To make requests. See httpx docs lat (float): lat of the desired location lon (float): lon of the desired location Returns: dict: json response from Open Weather One Call &quot;&quot;&quot; endpoint = get_one_call_endpoint(lat, lon) response = await client.get(endpoint) return response.json() async def gather_one_call_weather_data(lat_lon_pairs: list) -&gt; list: &quot;&quot;&quot;Given list of tuples of lat, lon pairs, will asynchronously fetch the one call open weather api data for those pairs Args: lat_lon_pairs (list): Destinations to get data for Returns: list: List of dictionaries which are json responses from open weather &quot;&quot;&quot; async with httpx.AsyncClient() as client: tasks = [ asyncio.ensure_future(async_get_one_call_data(client, lat, lon)) for lat, lon in lat_lon_pairs ] one_call_weather_data = await asyncio.gather(*tasks) return one_call_weather_data . Web App Component . Goals from the start: . Usable UI for comparing / viewing weather on 48 locations (mobile-friendly for hikers) | Not sluggish to load data or click through page after page to get different mountains / times | Good uptime | . Other technical considerations: . Obeying API limits API key security | . | Streamlit resource limits Cloud host or self host | . | . Caching Data . There are 2 main points of loading data in the app: . Load the list of mountains, heights, lats, lons | Fetch live data from OpenWeatherMap for all locations | . With Streamlit, decorating a function with @st.cache() will save the computed result so that it can be loaded faster by the next user! . Caching Mountain Data . The first list is static, and purely for convenience of fetching columns I load it in with pandas. (In hindsight I could have at least reset the index after sorting). . Leaving the default arguments lets this dataset get cached indefinitely (until the app gets shut down / restarted) . note: st.cache decorators commented out in notebook . import pandas as pd # import streamlit as st #@st.cache() def load_metadata() -&gt; pd.DataFrame: &quot;&quot;&quot;Function to read mountain lat, lon, and other metadata and cache results Returns: pd.DataFrame: df containing information for 48 mountains &quot;&quot;&quot; df = pd.read_csv(&quot;./data/mountains.csv&quot;) df = df.sort_values(&quot;name&quot;) return df load_metadata().head() . name link lat lon height_ft . 29 Bondcliff | https://en.wikipedia.org/wiki/Bondcliff | 44.153056 | -71.531111 | 4265 | . 35 Cannon Mountain | https://en.wikipedia.org/wiki/Cannon_Mountain_... | 44.156389 | -71.698333 | 4100 | . 8 Carter Dome | https://en.wikipedia.org/wiki/Carter_Dome | 44.267222 | -71.178889 | 4832 | . 33 East Peak Mount Osceola | https://en.wikipedia.org/wiki/East_Peak_Mount_... | 44.006111 | -71.520556 | 4340 | . 43 Galehead Mountain | https://en.wikipedia.org/wiki/Galehead_Mountain | 44.185278 | -71.573611 | 4024 | . Caching Weather Data . With this dataset I don&#39;t want to cache things indefinitely. In fact, we want it to update as often as the API limits will allow us to query it! . Setting a ttl or &quot;Time To Live&quot; value in st.cache(ttl=...) will cause the cache to bust if the precomputed result is longer than the provided time. . We&#39;ll set the ttl to 60 minutes to respect OpenWeatherMaps. . This means that if 100 users all open the app within 59 minutes of one another then only 1 request to load_data() would actually go to OpenWeatherMaps. The other 99 requests would use the cached result. . When any user opens it 61 minutes after the first user, the cache will be busted and another request to OpenWeatherMaps will refresh all of the 48 mountains&#39; weather data in the app. . pass # @st.cache(ttl=60 * 60) def load_data(lat_lon_pairs: list) -&gt; list: &quot;&quot;&quot;Function to fetch Open Weather data and cache results Args: lat_lon_pairs (list): Destinations to get data for Returns: list: List of dictionaries which are json responses from open weather &quot;&quot;&quot; data = asyncio.run(gather_one_call_weather_data(lat_lon_pairs)) return data . Bonuses . Display future forecast . Hikers don&#39;t need to know just the weather right now. They also need to know the next few hours&#39; forecast. . The OpenWeatherMaps data provides temperature and weather event forecasts hourly. . So how about a row across the screen with 5 hours of data in 5 even columns. . Feels good on desktop, but a horrendous amount of scrolling past locations you don&#39;t care about on mobile. . st.expander() provides a way to tuck sections away in a drop down hide/expand section. . Then using st.columns() we can get an iterator over x amount of columns. Zipping this with the hourly results starting from the next hour gives a nice way to match up layout to data. It also gives some flexibility for how many columns to include. . response = load_data()[0] current_temperature = round(response[&quot;current&quot;][&quot;temp&quot;], 1) with st.expander(&quot;Expand for future forecast:&quot;): for col, entry in zip(st.columns(5), response[&quot;hourly&quot;][1:]): col.write(f&quot;{clean_time(entry[&#39;dt&#39;])}&quot;) temperature = round(entry[&quot;temp&quot;], 1) col.metric( &quot;Temp (F)&quot;, temperature, round(temperature - current_temperature, 1) ) current_temperature = temperature . Jump Link Table . Using the app on mobile even with expander sections was too much scrolling. . I thought a Markdown table of links would be more straightforward, but I wound up doing a bunch of string mangling to get it running. . Having anchors on most commands such as st.title() is great for in-page navigation . def get_mtn_anchor(mountain: str) -&gt; str: anchor = mountain.lower().replace(&quot; &quot;, &quot;-&quot;) return f&quot;[{mountain}](#{anchor})&quot; mountains = load_metadata() table = [] table.append(&quot;| Mountains | | |&quot;) table.append(&quot;||||&quot;) for left, middle, right in zip( mountains.name[::3], mountains.name[1::3], mountains.name[2::3] ): table.append( f&quot;| {get_mtn_anchor(left)} | {get_mtn_anchor(middle)} | {get_mtn_anchor(right)} |&quot; ) # st.markdown(&quot; n&quot;.join(table)) &quot; n&quot;.join(table) . &#34;| Mountains | | | n|||| n| [Bondcliff](#bondcliff) | [Cannon Mountain](#cannon-mountain) | [Carter Dome](#carter-dome) | n| [East Peak Mount Osceola](#east-peak-mount-osceola) | [Galehead Mountain](#galehead-mountain) | [Middle Carter Mountain](#middle-carter-mountain) | n| [Middle Tripyramid](#middle-tripyramid) | [Mount Adams](#mount-adams) | [Mount Bond](#mount-bond) | n| [Mount Cabot](#mount-cabot) | [Mount Carrigain](#mount-carrigain) | [Mount Eisenhower](#mount-eisenhower) | n| [Mount Field](#mount-field) | [Mount Flume](#mount-flume) | [Mount Garfield](#mount-garfield) | n| [Mount Hale](#mount-hale) | [Mount Hancock](#mount-hancock) | [Mount Hancock](#mount-hancock) | n| [Mount Isolation](#mount-isolation) | [Mount Jackson](#mount-jackson) | [Mount Jefferson](#mount-jefferson) | n| [Mount Lafayette](#mount-lafayette) | [Mount Liberty](#mount-liberty) | [Mount Lincoln](#mount-lincoln) | n| [Mount Madison](#mount-madison) | [Mount Monroe](#mount-monroe) | [Mount Moosilauke](#mount-moosilauke) | n| [Mount Moriah](#mount-moriah) | [Mount Osceola](#mount-osceola) | [Mount Passaconaway](#mount-passaconaway) | n| [Mount Pierce](#mount-pierce) | [Mount Tecumseh](#mount-tecumseh) | [Mount Tom](#mount-tom) | n| [Mount Washington](#mount-washington) | [Mount Waumbek](#mount-waumbek) | [Mount Whiteface](#mount-whiteface) | n| [Mount Willey](#mount-willey) | [Mount Zealand](#mount-zealand) | [North Kinsman Mountain](#north-kinsman-mountain) | n| [North Tripyramid](#north-tripyramid) | [North Twin Mountain](#north-twin-mountain) | [Owl&#39;s Head (Franconia)](#owl&#39;s-head-(franconia)) | n| [South Carter Mountain](#south-carter-mountain) | [South Kinsman Mountain](#south-kinsman-mountain) | [South Twin Mountain](#south-twin-mountain) | n| [West Bond](#west-bond) | [Wildcat D Mountain](#wildcat-d-mountain) | [Wildcat Mountain](#wildcat-mountain) |&#34; .",
            "url": "https://tech.gerardbentley.com/streamlit/python/async/intermediate/2022/02/05/weather-forecast-dashboard.html",
            "relUrl": "/streamlit/python/async/intermediate/2022/02/05/weather-forecast-dashboard.html",
            "date": " • Feb 5, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "How to Run Python Code",
            "content": "3 Common Ways to Run Python . Cutting to the chase: . python -i in a terminal. This begins an &quot;interactive&quot; or &quot;REPL&quot; session where you can enter code line by line or copy and paste into it. (you might be able to just enter python) | python script_name.py in a terminal with a valid python file named &quot;script_name.py&quot; in the current directory. This runs the code in the file then exits Bonus: python -i script_name.py combines both. It runs the code in the file, then allows you to continue entering python code in the REPL | . | python -m jupyter notebook lets you access a code notebook in your browser for a mix of live coding and code editing. Requires pip install notebook or a code editor with ability to handle .ipynb files (such as VS Code) | . The REPL . python -i in a terminal. . The Python &quot;interactive&quot; session. Known in other languages as a Read-Eval-Print-Loop (REPL). . This method of running Python is useful for small bits of code and experiments. Need to test out what happens when you multiply an int and a string? Try it out in the REPL: . &gt; &gt;&gt; 3 * &quot;hello world &quot; . note: The common notation in books and online is to use the &gt;&gt;&gt; that appears in the terminal to indicate code can be entered as input to the Python REPL.Don&#39;t include the &gt;&gt;&gt; characters when copying though! . It&#39;s hard to save your work and sometimes awkward to paste code into the REPL as each line is executed without a chance to edit. . Upgrading the REPL . Try out iPython. It provides a much richer experience with features such as autocomplete, command history, and saving your session. . It uses the same Jupyter kernel which powers the notebooks we&#39;ll see later. . Python Script . python script_name.py in a terminal. . Most common way to &quot;run a Python script.&quot; Many programmers will have their first script be something like hello.py with a line of code print(&quot;hello world&quot;). To execute that script, the python command has to be used (or use a play button in your code editor which calls python in the background for you) . Anything included after the script name is passed into the Python execution as entries in the sys.argv list, which has the script name itself as the first element. argv is short for &quot;argument values&quot;, which means they&#39;re usually used as the parameters for your script. . Save the following as my_script.py . import sys print(f&quot;Command line args: {sys.argv}&quot;) . Then run the following in a terminal window with my_script.py in the current directory: . python my_script.py test args to be printed in sys.argv . Python will print any print() statements to the terminal window unless otherwise specified (see the &quot;file&quot; param in the print docs). . If your program gets stuck in an infinite loop or you need to interrupt it, hitting ctrl+c one or more times should give you back control of the command line. . Unlike the REPL, this is a valid way to run Python code in Production. It doesn&#39;t require any user interaction so it can be included in a bash / batch / ci/cd script. . python -i script_name.py combines runs the code in the file, then allows you to continue entering python code in the REPL. This can be useful for debugging, which can be done similarly with breakpoint() at the end of the script (which will require some understanding of pdb) . Upgrading your script runs . In most cases you should prefer the built-in argparse and logging modules in order to handle command line arguments and output messages from your script. . If you&#39;re willing to use packages from outside of the standard library you can check out Click, the incredibly popular CLI library. For a project specifically focused on the CLI, Typer builds from Click with even more ~magic~ (sensible defaults and type-hinting) . As for logging, popular packages such as structlog (with enhancements via rich) and loguru will help you format your logs in a way that&#39;s easy to read for you when you&#39;re developing and easy to parse by machines if you run your code in production. . Jupyter Notebook . python -m jupyter notebook runs a code notebook server locally on your computer. . This lets you code in a Jupyter notebook in your browser. Code notebooks are a non-traditional way of coding, but are quite popular in education, data science, and research. Each notebook is made up of &quot;cells&quot; of either code or some documentation text (usually in Markdown). . Jupyter notebooks (and this post) are focused on Python code cells, but it&#39;s good to know some other languages allow this kind of interaction in various code editors and online tools. . The main benefit of notebooks is having a &quot;live&quot; coding environment. You are able to run chunks of your code, observe the results, then tweak something and re-run just the last chunk. . Notebooks are also great for incorporating human readable documentation with your code and have some useful integrations with Image handling libraries and some charting and other data libraries. Some of the most notable: matplotlib, Pillow, and opencv . If you didn&#39;t notice at the top, this post itself was generated from a notebook. You can check out the notebook on github or make a copy of it and run the following Python code on your own. Then make some changes with your own data and run it again. . from datetime import datetime, date BIRTH_YEAR = 1996 def get_min_days_old(birth_year): difference = date.today() - date(birth_year, 12, 31) return difference.days min_days_old = get_min_days_old(BIRTH_YEAR) min_days_old . 9163 . Upgrading your Notebooks . Many complaints about notebooks involve not being able to edit them like a normal text file, not being able to do normal Python library development, and difficulty testing. . Libraries such as nbdev, fastpages (What this site is built with), and fastdoc from fast.ai address these gripes and more. . Code editors such as VS Code and Atom have ways of breaking your .py file up into runnable Jupyter cells with some magic comments. VS Code calls this the Python Interactive Window. This method of using Jupyter allows more natural text-editing. .",
            "url": "https://tech.gerardbentley.com/python/beginner/2022/02/01/run-python.html",
            "relUrl": "/python/beginner/2022/02/01/run-python.html",
            "date": " • Feb 1, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Install Python with Conda",
            "content": "Personal Python Preferences . note: These are recommendations, not hard and fast rules. There are trade-offs in every decision in software. . While your set up is largely up to personal preference, some factors to consider are: . How many different computers you use (will your configuration transfer easily?) | How many different OS&#39;s you use (will your configuration work between Windows / Linux?) | How many projects or versions of python / python packages do you need to use | How invested are you in learning the command line (would GUI make your life much less stressful?) | . The following set up has worked well for me doing working with multiple python versions on both Windows and Ubuntu/Debian systems. . Installing . Download and Install Python Conda . . Use Miniconda, the little sibling of Anaconda. It manages downloading and using different python versions and has some unique &quot;virtual environment&quot; features that are especially nice in data science work. . For the most up to date information (i.e. if the following doesn&#39;t work), see the official guide and click the link for your OS | Browser / GUI method: Download the installer for Python 3.9 for your computer&#39;s OS (or 3.10 if available). note most Windows computers are 64-bit these days, if you&#39;re unsure just double check | . | Run the file that was downloaded (probably in your ~/Downloads folder) Ask it to add python to your account&#39;s PATH variable. | Installing just for yourself should be fine for most users | . | . | Command line method: . note right click links on website to get specific base version of Python (latest is fine in most cases) | Windows Powershell . # Download the installer exe curl -uri https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe -outfile MinicondaInstaller.exe # Install &amp; . MinicondaInstaller.exe /AddToPath=0 /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile% Miniconda3 . | Linux bash (MacOS needs different download link) . # Download curl -url https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh --output MinicondaInstaller.sh # Install bash MinicondaInstaller.sh . | . | . | . Initialize Conda Base Environment . note This glosses over what virtual environments actually are entirely. This is intended to keep the document short. In essence they are folders that each hold a specific version of python and specific versions of python packages. . 2 Goals: . Python can make new virtual environments for different projects | Allows your code editor to utilize tools like black and flake8 to automatically format your code, show you what variables and functions you can use, and catch simple errors and tpyos before you run your code | . Conda Init . After Installing Miniconda . On windows open Anaconda Powershell Prompt on Windows, terminal for linux Enter conda init powershell then close and move on to the next step note if Windows fails to do the initialization and instead makes a pop-up about &quot;Folder Security&quot;, click the pop up then take action to allow the changes. You&#39;ll need to re-run the conda init command. | . | . | open up a new terminal note if you installed via command line method, you may need to close your current terminal and reopen | If you see (base) on the left of your current line try running the following commandpython --version . | If you don&#39;t see (base), try running the following command. Then open a new terminal window and try something like the python --version command again.conda init . | . | . Python Base Environment . Install some packages in the (base) conda virtual environment that are useful for code formatting and testing: . # Windows Powershell # Download the requirements file (base)$&gt; curl -uri https://gist.githubusercontent.com/gerardrbentley/b4fd6bdeb9167462cf990160ec246512/raw/e7194b303bb59e518e5d28c65e916cf3ebf1032a/base.requirements.txt -outfile base.requirements.txt # Install (base)$&gt; python -m pip install -r base.requirements.txt # Unix # Download the requirements file (base)$&gt; curl -url https://gist.githubusercontent.com/gerardrbentley/b4fd6bdeb9167462cf990160ec246512/raw/e7194b303bb59e518e5d28c65e916cf3ebf1032a/base.requirements.txt --output base.requirements.txt # Install (base)$&gt; python -m pip install -r base.requirements.txt . | . txt # formatter black # % testing coverage coverage # linter + static checker flake8 # interact with jupyter notebooks ipykernel # sort imports in a consistent fashion isort # let flake8 nag you about object naming pep8-naming # test your code pytest # make pytest and coverage play nicely pytest-cov . VS Code Text Editor Setup . VS Code is a very popular code editor with powerful features, active community extensions, and gets useful updates frequently. It&#39;s by no means the only way to program with Python, but it&#39;s one of the most beginner friendly ways to work on a variety of projects. . Set up test project . Make a folder called something like test_python and a file inside it called first_script.py . sh mkdir test_python cd test_python touch first_script.py . Download and Install VS Code . Download from your OS link | Install with downloaded file | Open VS Code for the first time | If it won&#39;t work or can&#39;t open, try reading their getting started guides | . Open your test project in VS Code . File -&gt; Open Folder Select the test_python folder | If a &quot;Trust this workspace&quot; message pops up, hit agree / trust | Open the first_script.py file Write something like print(&#39;Hello There&#39;) and save the file | . | . | Go back to your terminal and run python first_script.py | . Install Extensions for Python . In VS Code, open the extensions menu on the left (or with ctrl+shift+x) . Search for and install the following: Python (Microsoft) | . | Reload the window now (close and reopen VS Code) or install some more of the things below then reload (all are optional) | . Some other nice extensions (not necessary off the bat) . Python Specific Python Docstring Generator (Nils Werner) | Even Better TOML (tamasfe) | . | General VS Code indent-rainbow (oderwat): Visualize deeply indented blocks more easily | GitLens (Eric Amodio): Quickly check git history of files, branches, lines, etc. | . | Various File Types Markdown TOC (AlanWalk) | markdownlint (David Anson) | XML (Red Hat) | SQL Formatter (adpyke) | . | . Bonus: For Emacs users, &quot;Awesome Emacs Keymap&quot; will get you most of the way to familiar text editing keybindings . VS Code Set Python Env and Formatter . Recommended settings in VS Code . Type ctrl+shift+p then type &quot;settings json&quot; and select the entry, add these key-value pairs to file Edit the CHANGEME:USERNAME with your Windows user. (On Ubuntu based systems use /home/username/miniconda3/bin/python, similar for other Unix systems but with relevant user home directory) | . | . note: you can instead use ctrl+shift+p and search &quot;settings ui&quot; (or use ctrl+,) and then search for each of the keynames below to explore what other settings you might like to try. . { &quot;python.pythonPath&quot;: &quot;C: Users CHANGEME:USERNAME miniconda3 python.exe&quot;, &quot;files.autoSave&quot;: &quot;onFocusChange&quot;, &quot;editor.wordWrap&quot;: &quot;on&quot;, &quot;editor.wordWrapColumn&quot;: 88, &quot;jupyter.alwaysTrustNotebooks&quot;: true, &quot;python.linting.flake8Enabled&quot;: true, &quot;python.linting.flake8Args&quot;: [ &quot;--max-line-length=88&quot; ], &quot;python.analysis.typeCheckingMode&quot;: &quot;basic&quot;, &quot;workbench.editorAssociations&quot;: [ { &quot;viewType&quot;: &quot;jupyter.notebook.ipynb&quot;, &quot;filenamePattern&quot;: &quot;*.ipynb&quot; } ], &quot;python.linting.pylintEnabled&quot;: false, &quot;python.formatting.provider&quot;: &quot;black&quot;, &quot;python.linting.ignorePatterns&quot;: [ &quot;.vscode/*.py&quot;, &quot;**/site-packages/**/*.py&quot;, &quot;venv/*.py&quot; ], &quot;python.testing.pytestEnabled&quot;: true, &quot;python.venvPath&quot;: &quot;${workspaceFolder}&quot; } . Get on to Getting Things Done . That&#39;s the bare-bones Python setup. . Feel free to try out / research the following (Python related): . Typing error-filled python code and see how flake8 warns you | Start your .py document with # %% to make it a VS Code &quot;Python Interactive&quot; document (really awesome way to experiment with code blocks and debug small chunks) | Use alt+shift+f or ctrl+shift+p and search &#39;Format Document&#39; to format python according to black standard | Text Editing and Searching Guide including stuff like using multiple cursors, search and replace over multiple files, auto save (which is included in my json settings above) | Make a new virtual environment for your project with python -m venv venv or look into using conda to manage your environments | Look into VS Code&#39;s live code sharing and git integrations to collaborate better | . Or expand your environment by setting up a few more tools (tangential to Python): . Look into Emmet the auto completer for html files built into VS Code | Install Node if you&#39;re going to be doing some web development or otherwise need npm | Install Docker if you want to explore modern container based deployment | Find some good Python Reading (Ok one more Python recommendation; some of these are available for low-to-no cost from the authors) | .",
            "url": "https://tech.gerardbentley.com/python/beginner/2022/01/29/install-python.html",
            "relUrl": "/python/beginner/2022/01/29/install-python.html",
            "date": " • Jan 29, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Scanning URLs from Images",
            "content": "Scanning QR codes for humans: URLs . The idea for this popped up when talking to my mom about how QR codes work. The simple usecase for QR codes is the same as a URL: get the user to a certain website. . So why can&#39;t we just scan a real URL with our cameras...? (spoiler: many modern android and ios devices can, but that&#39;s a short end to the story) . I&#39;m all for QR codes being used for more things, but URLs aren&#39;t going away any time soon for a few reasons: . Not everybody knows how to make a QR code (hint: write click on a page in Chrome or use the python-qrcode library) | URLs often contain the company name so people can remember them (qr codes can contain logos in some cases) | URLs are a single line (most of the time) rather than taking up a whole square of printing / advertising space | . I also wanted to give a live Streamlit app a shot after using it for some AI demos with students. So was born the Streamlit URL Scanner! . In this notebook I&#39;ll breakdown the basic mechanisms behind the app, see the full source code on github . Python Dependencies . There are 3 goals for this app: . Allow user to upload images containing URLs to the web app | Run high-accuracy Optical Character Recognition (OCR) on the uploaded image | Provide any URLs from the extracted text to the user for easy clicking | . I went with the libraries that I thought would give the fastest and most successful development experience. . Python Web App . streamlit: Python rapid development web app framework Provides a file upload component out of the box with st.file_uploader | Simple Cloud deployment with secure secrets for OCR component | . | . Contenders . fastapi: Providing a route to OCR component as a service Asynchronous by default is nice for handling distributed transactions to OCR task | . | django: Overbaked for usecase This is a proof of concept tool, not a full-stack user-oriented website | . | flask / bottle: Have ways of being asynchronous, but synchronous by default | . | . All of these other options would require a frontend app or integrating some JS library or other index.html + JS + CSS combination . OCR . AWS Rekognition: Trained for text detection on real world images Limited to 100 words detected | Accessed with the boto3 library | . | . Contenders . AWS Textract: More tuned for documents than real world | Tesseract: Still a good OCR, but also focused on documents Can be self-hosted, not paid per transaction | . | . URL Extraction . urlextract: I didn&#39;t want to write a regex for URLs when there&#39;s a small library without any known issues | . Glue Code . PIL / Pillow: Python Imaging Library for handling user uploaded images and resizing if needed | pydantic: Typed Settings management with loading from CLI, Environment, Secrets | . import io import json import boto3 import streamlit as st from PIL import Image, ImageDraw, ImageOps from pydantic import BaseSettings from urlextract import URLExtract . OCR + Extractor Setup . Pydantic&#39;s BaseSettings Class allows us to read in settings for connecting to AWS account. This can be used with Docker secrets, but this app is deployed to Streamlit cloud. . boto3 lets us establish a client to the Rekognition service. . URL Extract requires some initialization to recognize all domain names. . class Settings(BaseSettings): &quot;&quot;&quot;Handles fetching configuration from environment variables and secrets. Type-hinting for config as a bonus&quot;&quot;&quot; aws_access_key_id: str aws_secret_access_key: str aws_region: str settings = Settings() rekog_client = boto3.client( &quot;rekognition&quot;, region_name=settings.aws_region, aws_access_key_id=settings.aws_access_key_id, aws_secret_access_key=settings.aws_secret_access_key, ) extractor = URLExtract() . 2022-01-27 18:44:24.510 INFO filelock: Lock 139763555315184 acquired on /home/gar/miniconda3/lib/python3.8/site-packages/urlextract/data/tlds-alpha-by-domain.txt.lock 2022-01-27 18:44:24.555 INFO filelock: Lock 139763555315184 released on /home/gar/miniconda3/lib/python3.8/site-packages/urlextract/data/tlds-alpha-by-domain.txt.lock . Detecting Text in an Image . AWS Rekognition can receive either a path to an S3 object or raw image bytes. For this app I went with passing just the image bytes, so a helper function to compress larger images was needed. We&#39;ll ignore the streamlit specific alert message that this is happening for this demo. (The S3 version isn&#39;t much more complicated, and is beneficial for more general OCR apps) . Another small helper for passing the correct parameters to boto3 will wrap up this section. . Pillow will do our image handling in the app, so we&#39;ll use it for showing a demo detection in the following code cells . def compress_pil_image(image: Image, limit=(5 * (2 ** 20))) -&gt; bytes: &quot;&quot;&quot;Takes a Pillow image and returns byte values of the image saved as png. Reduces dimensions of image if it is larger than provided limit. Args: image (Image): Image to get the bytes for limit (int, optional): Maximum number of bytes. Defaults to 5mb (5 * (2 ** 20)). Returns: bytes: image saved as PNG bytes object &quot;&quot;&quot; image_bytes = io.BytesIO() image.save(image_bytes, &quot;PNG&quot;) output = image_bytes.getvalue() limit_to_bytes_ratio = limit / len(output) if limit_to_bytes_ratio &gt;= 1.0: return output else: # st.warning(f&quot;Resizing by ratio: {limit_to_bytes_ratio}&quot;) width, height = image.size new_width = int(width * limit_to_bytes_ratio) new_height = int(height * limit_to_bytes_ratio) new_image = image.resize((new_width, new_height), Image.ANTIALIAS) return compress_pil_image(new_image, limit) def rekog_detect_by_bytes(image_bytes: bytes) -&gt; dict: &quot;&quot;&quot;Takes an array of bytes representing jpg / png image. Tries to return response from AWS Rekognition detect_text API on the image bytes See docs for more: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/rekognition.html#Rekognition.Client.detect_text # noqa: E501 Args: image_bytes (bytes): Image to run detection on (less than 5 mb) Returns: dict: List of text detections, geometry of the detections, and metadata &quot;&quot;&quot; response = rekog_client.detect_text(Image={&quot;Bytes&quot;: image_bytes}) return response . demo_image = Image.open(&#39;test_images/sample_urls.jpg&#39;) demo_image . image_bytes = compress_pil_image(demo_image) rekognotion_response = rekog_detect_by_bytes(image_bytes) rekognotion_response . {&#39;TextDetections&#39;: [{&#39;DetectedText&#39;: &#39;Lorem ipsum...&#39;, &#39;Type&#39;: &#39;LINE&#39;, &#39;Id&#39;: 0, &#39;Confidence&#39;: 83.6632080078125, &#39;Geometry&#39;: {&#39;BoundingBox&#39;: {&#39;Width&#39;: 0.198333278298378, &#39;Height&#39;: 0.05164804682135582, &#39;Left&#39;: 0.4017779529094696, &#39;Top&#39;: 0.3004961609840393}, &#39;Polygon&#39;: [{&#39;X&#39;: 0.4021288752555847, &#39;Y&#39;: 0.3004961609840393}, {&#39;X&#39;: 0.6001112461090088, &#39;Y&#39;: 0.3018783628940582}, {&#39;X&#39;: 0.5997602939605713, &#39;Y&#39;: 0.3521442115306854}, {&#39;X&#39;: 0.4017779529094696, &#39;Y&#39;: 0.3507620096206665}]}}, {&#39;DetectedText&#39;: &#39;google.com&#39;, &#39;Type&#39;: &#39;LINE&#39;, &#39;Id&#39;: 1, &#39;Confidence&#39;: 99.61248779296875, &#39;Geometry&#39;: {&#39;BoundingBox&#39;: {&#39;Width&#39;: 0.142822265625, &#39;Height&#39;: 0.0458984375, &#39;Left&#39;: 0.428466796875, &#39;Top&#39;: 0.3544921875}, &#39;Polygon&#39;: [{&#39;X&#39;: 0.428466796875, &#39;Y&#39;: 0.3544921875}, {&#39;X&#39;: 0.5712890625, &#39;Y&#39;: 0.3544921875}, {&#39;X&#39;: 0.5712890625, &#39;Y&#39;: 0.400390625}, {&#39;X&#39;: 0.428466796875, &#39;Y&#39;: 0.400390625}]}}, {&#39;DetectedText&#39;: &#39;https://streamlit.io/&#39;, &#39;Type&#39;: &#39;LINE&#39;, &#39;Id&#39;: 2, &#39;Confidence&#39;: 97.68013763427734, &#39;Geometry&#39;: {&#39;BoundingBox&#39;: {&#39;Width&#39;: 0.2527962923049927, &#39;Height&#39;: 0.051752522587776184, &#39;Left&#39;: 0.37402498722076416, &#39;Top&#39;: 0.45518985390663147}, &#39;Polygon&#39;: [{&#39;X&#39;: 0.37402498722076416, &#39;Y&#39;: 0.455630898475647}, {&#39;X&#39;: 0.6267316937446594, &#39;Y&#39;: 0.45518985390663147}, {&#39;X&#39;: 0.6268212795257568, &#39;Y&#39;: 0.506501317024231}, {&#39;X&#39;: 0.3741145431995392, &#39;Y&#39;: 0.5069423913955688}]}}, {&#39;DetectedText&#39;: &#39;Lorem&#39;, &#39;Type&#39;: &#39;WORD&#39;, &#39;Id&#39;: 3, &#39;ParentId&#39;: 0, &#39;Confidence&#39;: 99.94923400878906, &#39;Geometry&#39;: {&#39;BoundingBox&#39;: {&#39;Width&#39;: 0.07525634765625, &#39;Height&#39;: 0.0341796875, &#39;Left&#39;: 0.402099609375, &#39;Top&#39;: 0.3046875}, &#39;Polygon&#39;: [{&#39;X&#39;: 0.402099609375, &#39;Y&#39;: 0.3046875}, {&#39;X&#39;: 0.47735595703125, &#39;Y&#39;: 0.3046875}, {&#39;X&#39;: 0.47735595703125, &#39;Y&#39;: 0.3388671875}, {&#39;X&#39;: 0.402099609375, &#39;Y&#39;: 0.3388671875}]}}, {&#39;DetectedText&#39;: &#39;ipsum...&#39;, &#39;Type&#39;: &#39;WORD&#39;, &#39;Id&#39;: 4, &#39;ParentId&#39;: 0, &#39;Confidence&#39;: 67.37718200683594, &#39;Geometry&#39;: {&#39;BoundingBox&#39;: {&#39;Width&#39;: 0.11253990232944489, &#39;Height&#39;: 0.05104871839284897, &#39;Left&#39;: 0.48755744099617004, &#39;Top&#39;: 0.30109521746635437}, &#39;Polygon&#39;: [{&#39;X&#39;: 0.4879346489906311, &#39;Y&#39;: 0.30109521746635437}, {&#39;X&#39;: 0.6000973582267761, &#39;Y&#39;: 0.30386465787887573}, {&#39;X&#39;: 0.5997201800346375, &#39;Y&#39;: 0.35214391350746155}, {&#39;X&#39;: 0.48755744099617004, &#39;Y&#39;: 0.3493745028972626}]}}, {&#39;DetectedText&#39;: &#39;google.com&#39;, &#39;Type&#39;: &#39;WORD&#39;, &#39;Id&#39;: 5, &#39;ParentId&#39;: 1, &#39;Confidence&#39;: 99.61248779296875, &#39;Geometry&#39;: {&#39;BoundingBox&#39;: {&#39;Width&#39;: 0.142822265625, &#39;Height&#39;: 0.0458984375, &#39;Left&#39;: 0.428466796875, &#39;Top&#39;: 0.3544921875}, &#39;Polygon&#39;: [{&#39;X&#39;: 0.428466796875, &#39;Y&#39;: 0.3544921875}, {&#39;X&#39;: 0.5712890625, &#39;Y&#39;: 0.3544921875}, {&#39;X&#39;: 0.5712890625, &#39;Y&#39;: 0.400390625}, {&#39;X&#39;: 0.428466796875, &#39;Y&#39;: 0.400390625}]}}, {&#39;DetectedText&#39;: &#39;https://streamlit.io/&#39;, &#39;Type&#39;: &#39;WORD&#39;, &#39;Id&#39;: 6, &#39;ParentId&#39;: 2, &#39;Confidence&#39;: 97.68013763427734, &#39;Geometry&#39;: {&#39;BoundingBox&#39;: {&#39;Width&#39;: 0.2527649700641632, &#39;Height&#39;: 0.051752522587776184, &#39;Left&#39;: 0.3740406334400177, &#39;Top&#39;: 0.45518985390663147}, &#39;Polygon&#39;: [{&#39;X&#39;: 0.3740406334400177, &#39;Y&#39;: 0.4563566744327545}, {&#39;X&#39;: 0.6267316937446594, &#39;Y&#39;: 0.45518985390663147}, {&#39;X&#39;: 0.6268056035041809, &#39;Y&#39;: 0.5057755708694458}, {&#39;X&#39;: 0.3741145431995392, &#39;Y&#39;: 0.5069423913955688}]}}], &#39;TextModelVersion&#39;: &#39;3.0&#39;, &#39;ResponseMetadata&#39;: {&#39;RequestId&#39;: &#39;6ee34f23-945f-45ea-9fe4-439580da7ff2&#39;, &#39;HTTPStatusCode&#39;: 200, &#39;HTTPHeaders&#39;: {&#39;x-amzn-requestid&#39;: &#39;6ee34f23-945f-45ea-9fe4-439580da7ff2&#39;, &#39;content-type&#39;: &#39;application/x-amz-json-1.1&#39;, &#39;content-length&#39;: &#39;2883&#39;, &#39;date&#39;: &#39;Fri, 28 Jan 2022 02:56:30 GMT&#39;}, &#39;RetryAttempts&#39;: 0}} . Extracting URLs from Text . If you&#39;re not familiar with APIs or bounding boxes the above output might be a bit of a mess. That&#39;s alright, we&#39;re here to work through it. . Rekognition&#39;s text detection returns a List of &quot;Text Detection&quot; records. Each of these &quot;Text Detections&quot; has a few features, but the most important to our purpose is &quot;Detected Text.&quot; . If we&#39;re really just interested in the text, we can use a list comprehension to get the detections and pass them to the URL extractor . detected_text = [detection[&#39;DetectedText&#39;] for detection in rekognotion_response[&#39;TextDetections&#39;] if detection[&quot;Type&quot;] == &quot;LINE&quot;] extracted_urls = extractor.find_urls(&quot; &quot;.join(detected_text)) extracted_urls . [&#39;google.com&#39;, &#39;https://streamlit.io/&#39;] . Streamlit aspect . Streamlit provides the frontend components for uploading and viewing images and links. (And giving a semblance of user experience) . It&#39;s hard to demo these aspects in a notebook, but here are the streamlit snippets and use cases in the app. . # Header and Description st.title(&quot;URL Scan :computer:&quot;) st.header( &quot;Never type a URL from real life again! &quot; &quot;Take a picture with a URL in it and we&#39;ll scan any links so you can click them!&quot; ) st.subheader(&quot;(Or upload an image you already have on your device)&quot;) # Retrieve image from camera or upload camera_bytes = st.camera_input(&quot;Take a picture&quot;) uploaded_bytes = st.file_uploader( &quot;Upload an image&quot;, type=[&quot;png&quot;, &quot;jpg&quot;, &quot;jpeg&quot;], ) # Context manager to give better loading experience with st.spinner(&quot;Loading Image Bytes&quot;): # Compress pil image pass # Provide visual alerts to the user st.success( f&quot;Found {len(extracted_urls)} URLs!&quot; ) # Allow downloading the detected text / urls st.download_button( label=&quot;Download extracted url list&quot;, data=&#39; n&#39;.join(extracted_urls), file_name=&quot;extracted_urls.txt&quot;, mime=&quot;text&quot;, ) # Display the raw and detected images st.image( demo_image, use_column_width=True, ) . Testing and deployment . Docker is used to help smooth environments between windows / linux / mac. Docker-compose is used to open up to future extensions with other backend apps. . Linting, Static Checking, and Testing are handled locally before deployment. . E2E testing consists of Selenium visual baseline testing against locally deployed app in docker-compose . Deployment would be straightforward with docker-compose, but Streamlit cloud provides plenty of resources for this use case. Not having to write a CI/CD pipeline is fine by me. . Downsides are the need to deploy secrets manually to streamlit and it requires setting up a seperate app deployment if a staging / UAT environment is desired. . BONUS: Painting detections . The url extraction code used above isn&#39;t the same process as used in the app. I think the bounding box aspect of text detection is engaging for users to understand the OCR component, so I include a copy of their image with the bounding boxes painted on. . We get all of the location data in the &quot;Text Detections&quot; from Rekognition, but we have to do a bit of conversion from their format to draw them with Pillow&#39;s ImageDraw. In this case we&#39;re converting from a format that provides the Width, Height, Left-side X coordinate, and Top-side Y coordinate in percentage of the image size. . Our goal is to use some arithmetic to get the (X,Y) coordinates of the top-left corner of our bounding box and the bottom-right corner in pixels. (If you haven&#39;t worked with bounding boxes, there&#39;s even more possible formats...) . image_w, image_h = demo_image.size painted_image = demo_image.copy() canvas = ImageDraw.Draw(painted_image) for detection in rekognotion_response[&quot;TextDetections&quot;]: if detection[&quot;Type&quot;] == &quot;LINE&quot;: text = detection[&quot;DetectedText&quot;] aws_bbox = detection[&quot;Geometry&quot;][&quot;BoundingBox&quot;] top_left_x = aws_bbox[&quot;Left&quot;] * image_w top_left_y = aws_bbox[&quot;Top&quot;] * image_h box_width = aws_bbox[&quot;Width&quot;] * image_w box_height = aws_bbox[&quot;Height&quot;] * image_h bot_right_x = top_left_x + box_width bot_right_y = top_left_y + box_height canvas.rectangle( (top_left_x, top_left_y, bot_right_x, bot_right_y), outline=&quot;Red&quot;, width=3, ) painted_image .",
            "url": "https://tech.gerardbentley.com/streamlit/python/aws/2022/01/24/streamlit-url-scan.html",
            "relUrl": "/streamlit/python/aws/2022/01/24/streamlit-url-scan.html",
            "date": " • Jan 24, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "The Terminal (/ Shell / Command Line / Console...)",
            "content": "What’s a Terminal . The Terminal, which you might also hear called shell, console, or command line (with a fair bit of nuance) is a program that lets you enter commands for the computer to run. In different computers the program will vary (Terminal, Powershell, bash, etc.), but the idea of interacting with the computer using text commands one line at a time is present in all of them. . Why Keyboard Over Mouse? . So the Terminal lets you access apps and files and execute programs without using a mouse or other windows, but why would you want to abandon your mouse? All of the work we do in a Terminal is both plain text and can be automated much more easily than mouse movements and clicks. . Using a shell also usually gives you access to the Kernel of your OS, the software in control of basically all your applications, so you can take back your technological freedom. . Finally, Graphical (GUI) interfaces aren’t available for all programs, especially a lot of the older software. It’s generally easier to develop a program that takes a few Command Line arguments than a full blown GUI Application. . 3 Navigation Commands . When you open Terminal.app (on many linux distros use super+spacebar, on mac you use command+spacebar then search Terminal) all you get is a blank command line prompt, probably ending with $ . The terminal works like a filesystem/Finder window in that you need to navigate ‘up’ and ‘down’ into different folders to find particular files. When you open a new Terminal it is most likely located at your account’s Home folder (also referred to as ~). . NOTE: On Mac the ~ can be replaced with /Users/YOUR-USERNAME/ for an “absolute” path (absolute vs relative explanation). Ubuntu based distros ~ == /home/YOUR-USERNAME/. And Windows is different… ~ == C: Users YOUR-USERNAME. For reference, your Desktop folder is located at ~/Desktop, your Documents at ~/Documents . Now for the 3 Basic commands that will help you navigate around (type these in the command line and hit enter): . pwd . Print Working Directory: Tells you where in the filesystem the command line is currently pointed. On a fresh Terminal window it should show /Users/YOUR-USERNAME/ . ls . List: Lists out all the files and directories in the current directory you’re pointed at. Also helps you know where in the filesystem you are and what files you have easy access to. . cd . Change Directory: Actually moves where the command line is pointed to a different directory / folder. . The common uses of cd and ls: . Go to your project folder . On my personal computer I try to keep all my coding projects under a folder called research (in their own individual folders) which is in my Home folder (~/research or /Users/Gerard/research) . So to get to my project I open terminal and enter . cd research/my-project-folder . NOTE: This works because the Terminal is already pointed at my ~/ directory and research is in that directory. You can use ls to see if research is present in your Home directory . If you don’t remember the project-folder name you can do the following . cd research ls . This will show you all the files and folders in research, then you can cd directly into it without the research/ part . cd project-folder-i-remember-now . Go back one or more directories . Just like ~/ is a shorthand symbol for “Home Directory”, ./ is a symbol for the current working directory (pwd) . By this I mean that . represents the current working directory, where the terminal command line is pointed. . So the same command from before works the same like this (from a fresh Terminal located at ~/) . cd ./research/my-project-folder . After executing that command, pwd will tell you the Terminal is at /Users/Gerard/research/my-project-folder, which we want because we just cdd into that directory . If we wanted to switch projects (to a different folder in research), we need to go ‘up’ a folder. To do this we use .. to represent the folder ‘above’ the current folder . cd .. . This brings us back to research, so pwd will say /Users/Gerard/research/ . Now we can cd into a different folder . cd my-other-project-folder . If we wanted to switch to a different project directly in one command we can use . cd ../third-folder . I think of this as ‘going to third-folder, which is in the folder above the current one’ . Going Further . ls and cd should get you far enough to run Python scripts (also using python as a command!). . Making your own or finding a terminal commands cheatsheet online can be extremely helpful when first starting out. Repetition is key to becoming comfortable with and memorizing these things. Nobody memorizes them after the first use! .",
            "url": "https://tech.gerardbentley.com/habits/beginner/2020/04/03/terminal.html",
            "relUrl": "/habits/beginner/2020/04/03/terminal.html",
            "date": " • Apr 3, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "I Make Money Editing Text Files (VS Code Settings)",
            "content": "Editing Text Files . It’s the core of programming. . I admit there are a lot of GUI and block coding tools in the 21st century. . But unless you’re going to retire from coding and go to woodworking, you’ll probably need to at least open and view some code files or non code files. . Why use a Code Editor? . For the same reason some teachers allow cheatsheets: So you can focus on the relevant task. It’s not efficient to constantly think about the syntax of your program. It’s especially not efficient to constantly run into fixable bugs and errors. . A few features in text editors that I now take for granted are: . templating | autocompletion &amp; suggestion | syntax highlighting | syntax correction | . In this post I’ll focus on how I set up my VS Code to help decrease my cognitive load when coding in Python (And some bonus tips for blogging / READMEs with Markdown). I’ll go over relevant extensions for the Python ecosystem, and try to discuss different settings options you may prefer better. . NOTE: I personally find VS Code more friendly for new users than older text editors like Emacs and Vim, but those are also incredibly powerful and customizable. It also has significant community extension support. In fact, this post was partially inspired and is partially fueled by “How I VSCode” a 100% open-source VS Code extension by Scott W that generates a simple public profile to share the extensions you use. Here’s mine: howivscode.com/gerardrbentley. . First Steps . Download . A VS Code download for your system should be available here. If you need additional directions on downloading and installing, Microsoft already has an extensive guide on using VS Code that I’ll reference a bit. . Open Code . I recommend using your OS’s search (probably cmd + spacebar, windows key, or super key) and typing code to search and if it pops up hit enter to open VS Code with just the keyboard. . If you don’t want to use the keyboard, go to your Applications folder / Start menu / Launch menu to find VS Code . New Project Folder . For this demo we’ll only be making a few files, but VS Code works best when we have a project folder, so create one now. . Use ctrl+k then ctrl+o to Open a folder. Go ahead and create one named /vscodetests/ and put it on your Desktop (or use a different name and location, choose your own adventure!) . If you don’t want to use the keyboard, the File -&gt; Open Folder option from the top bar will do the same action. . New File . You can use ctrl+n to create a New file, but I usually Right-Click on the name of the folder to put the file in and select New File; name it something like basic_python.py. . If you have only one folder you can Right-Click anywhere in the left “File Explorer” panel (ctrl+shift+e to get it back in focus if it’s gone) . Check out the default keyboard shortcuts for mac, windows, linux keyboard shortcuts . First Extensions . After opening a new file (or saving it with .py ending if you used ctrl+n to create one), you’ll probably get a popup in the bottom right corner suggesting you install the Recommended Python Extensions. This is from Microsoft and the de-facto Python settings extension in VS Code, so go ahead and install it from there. . In general when you open a new filetype you will get a popup like this. The features vary by language / filetype, but there are many linters, formatters, and checkers that benefit from Language Server Protocol (LSP) these days. . If you ever want to uninstall the Python extension or install new extensions, use ctrl+shift+x to open the “EXtensions” panel on the left. . Some good candidates for Python project contributors: . Python Specific Python Docstring Generator (Nils Werner) | Even Better TOML (tamasfe) | . | General VS Code RETIRED, Built In Now Bracket Pair Colorizer 2 (CoenraadS): Visualize nested brackets and parentheses more easily | indent-rainbow (oderwat): Visualize deeply indented blocks more easily | GitLens (Eric Amodio): Quickly check git history of files, branches, lines, etc. | . | Various File Types Markdown TOC (AlanWalk) | markdownlint (David Anson) | XML (Red Hat) | SQL Formatter (adpyke) | . | . Bonus: For Emacs users, “Awesome Emacs Keymap” will get you most of the way to familiar text editing keybindings . VS Code Set Python Env and Formatter . Recommended settings in VS Code . Type ctrl+shift+p then type “settings json” and select the entry, add these key-value pairs to file Edit the CHANGEME:YOURNAME with your Windows user. (On Ubuntu based systems use /home/username/miniconda3/bin/python, similar for other Unix systems but with relevant user home directory) | . | . note: you can instead use ctrl+shift+p and search “settings ui” (or use ctrl+,) and then search for each of the keynames below to explore what other settings you might like to try (or different choices for these options!). . { &quot;files.autoSave&quot;: &quot;onFocusChange&quot;, &quot;editor.wordWrap&quot;: &quot;on&quot;, &quot;editor.wordWrapColumn&quot;: 88, &quot;jupyter.alwaysTrustNotebooks&quot;: true, &quot;python.linting.flake8Enabled&quot;: true, &quot;python.linting.flake8Args&quot;: [ &quot;--max-line-length=88&quot; ], &quot;python.analysis.typeCheckingMode&quot;: &quot;basic&quot;, &quot;workbench.editorAssociations&quot;: [ { &quot;viewType&quot;: &quot;jupyter.notebook.ipynb&quot;, &quot;filenamePattern&quot;: &quot;*.ipynb&quot; } ], &quot;python.linting.pylintEnabled&quot;: false, &quot;python.formatting.provider&quot;: &quot;black&quot;, &quot;python.linting.ignorePatterns&quot;: [ &quot;.vscode/*.py&quot;, &quot;**/site-packages/**/*.py&quot;, &quot;venv/*.py&quot; ], &quot;python.testing.pytestEnabled&quot;: true, &quot;python.venvPath&quot;: &quot;${workspaceFolder}&quot; } . Get on to Getting Things Done . That’s the bare-bones Python setup. . Some of the suggestions below rely on popular Python packages: . # formatter black # linter + static checker flake8 # interact with jupyter notebooks ipykernel # sort imports in a consistent fashion isort # let flake8 nag you about object naming pep8-naming . You can install them to your current Python environment with pip install black for example. . Python Things to Try . Feel free to try out / research the following (Python related): . Typing error-filled python code and see how flake8 warns you | Start your .py document with # %% to make it a VS Code “Python Interactive” document (really awesome way to experiment with code blocks and debug small chunks) | Use alt+shift+f or ctrl+shift+p and search ‘Format Document’ to format python according to black standard | Text Editing and Searching Guide including stuff like using multiple cursors, search and replace over multiple files, auto save (which is included in my json settings above) | Make a new virtual environment for your project with python -m venv venv or look into using conda to manage your environments | Look into VS Code’s live code sharing and git integrations to collaborate better | . Other Languages . Or expand your environment by setting up a few more tools (tangential to Python): . Look into Emmet the auto completer for html files built into VS Code | Install Node if you’re going to be doing some web development or otherwise need npm | Install Docker if you want to explore modern container based deployment | Find some good Python Reading (Ok one more Python recommendation; some of these are available for low-to-no cost from the authors) | . Relevant Links . PyCharm is tooled specifically for Python and is very popular in the community. . JupyterLab and plain Jupyter Notebooks are common development tools for Python users as well. . Atom and Sublime are also still rather popular among coders. . Emacs and Vim are also still great (well, Emacs lacks a decent editor…) .",
            "url": "https://tech.gerardbentley.com/beginner/habits/general-coding/2020/04/01/how-i-code.html",
            "relUrl": "/beginner/habits/general-coding/2020/04/01/how-i-code.html",
            "date": " • Apr 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m a software developer interested in web-based apps, ethical / explainable AI, and bringing coding to others. . I started programming at Hotchkiss, back in 2013. I took the one and only Java class then left off until college. . I graduated from Pomona College in 2019 with a BA in Computer Science, then stuck around for the summer and fall as part of a post-bacc research year. Working with professor Joe Osborn we authored “The Videogame Affordances Corpus” at EXAG 2019, which was the first paper for our ‘Formal Analysis of Interactive Media (FAIM) Lab’. My work over that year focused mainly on testing Pytorch models to analyze in-game screenshots from a collection of classic action and adventure games. . Through the pandemic I took a contract role for an Edu-tech startup Edlyft (started by some fellow Hotchkiss alums!) . In January of 2021 I started a job with Cascade Financial Services doing Python automation and working on some legacy projects. . The only machine learning I work on there focuses on mortgage returns and already has established models and usecases. So I started part-time teaching AI and Python topics with AI Camp to get back to education and ML. .",
          "url": "https://tech.gerardbentley.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tech.gerardbentley.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}